{"file_contents":{"design_guidelines.md":{"content":"# POS Restaurant System Design Guidelines\n\n## Design Approach\n**Utility-Focused Design System Approach**: Using Material Design principles optimized for touch interactions and restaurant workflow efficiency. This is a productivity tool where speed, accuracy, and learnability are paramount.\n\n## Core Design Elements\n\n### Color Palette\n**Light Mode Primary:**\n- Primary: 25 85% 45% (Deep restaurant green)\n- Surface: 0 0% 98% (Clean white background)\n- Surface variant: 0 0% 95% (Card backgrounds)\n- Success: 140 75% 45% (Order confirmation)\n- Warning: 35 85% 55% (Price highlights)\n\n**Dark Mode Primary:**\n- Primary: 25 60% 65% (Softer green for dark mode)\n- Surface: 0 0% 12% (Dark background)\n- Surface variant: 0 0% 18% (Card backgrounds)\n- Text: 0 0% 95% (High contrast text)\n\n### Typography\n- **Primary Font**: Inter via Google Fonts\n- **Headers**: 600 weight, sizes 24px-32px\n- **Body**: 400 weight, 16px-18px for readability\n- **Prices**: 700 weight, emphasized sizing\n- **Categories**: 500 weight, 14px\n\n### Layout System\n**Tailwind Spacing**: Use units of 2, 4, 6, and 8 for consistent spacing (p-4, m-6, gap-8)\n- **Grid**: Three-column layout: 1fr 2fr 1fr ratio\n- **Cards**: Minimum 120px height for touch targets\n- **Buttons**: Minimum 48px height for accessibility\n\n### Component Library\n\n**Categories (Left Column):**\n- Vertical list with 60px height items\n- Icons from Heroicons (outline style)\n- Active state with primary color background\n- Clear visual feedback for selected category\n\n**Product Cards (Center Grid):**\n- 2-3 column responsive grid\n- Cards with subtle shadows and rounded corners\n- Touch-friendly 140px minimum height\n- Price prominently displayed in success color\n- Hover state with slight elevation\n\n**Order Summary (Right Column):**\n- Sticky header with order total\n- Scrollable item list with quantity controls\n- Large circular +/- buttons (48px minimum)\n- Price calculations clearly separated\n- Prominent \"Enviar a Cocina\" button (primary color, 56px height)\n\n**Visual Hierarchy:**\n- Category selection uses primary color prominence\n- Product prices use success color for immediate recognition\n- Order total uses larger typography and visual separation\n- Critical actions (send to kitchen) use maximum visual weight\n\n**Touch Optimization:**\n- All interactive elements minimum 44px touch targets\n- Generous spacing between clickable elements\n- Clear visual feedback for all interactions\n- Swipe gestures disabled to prevent accidental actions\n\n**Tablet Vertical Optimization:**\n- Fixed three-column layout prevents horizontal scrolling\n- Category and order columns have fixed widths\n- Product grid scrolls vertically only\n- Bottom navigation/actions remain accessible\n\n**Language Considerations:**\n- Spanish text properly spaced and sized\n- Currency formatting follows Spanish conventions (€)\n- IVA calculation clearly labeled and separated\n- Professional restaurant terminology throughout","size_bytes":2926},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# POS Restaurant System\n\n## Overview\n\nThis is a modern Point of Sale (POS) system designed specifically for restaurants. The application provides a touch-friendly interface for taking orders, managing menu items, and processing transactions. Built with React and TypeScript, it features a three-column layout with categories, products, and order summary sections optimized for restaurant workflow efficiency.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Library**: shadcn/ui components built on top of Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system focused on touch interactions\n- **State Management**: TanStack React Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Design System**: Material Design principles with custom restaurant-focused color palette and typography\n\n### Backend Architecture\n- **Runtime**: Node.js with Express server\n- **Language**: TypeScript with ES modules\n- **Development**: Hot module replacement via Vite integration\n- **Data Storage**: In-memory storage with interface abstraction for easy database migration\n- **API Design**: RESTful endpoints for categories, products, and order management\n\n### Database Schema\nThe application uses Drizzle ORM with PostgreSQL schema definitions:\n- **Categories**: ID, name, and icon fields for menu organization\n- **Products**: ID, name, description, price, and category relationship\n- **Order Items**: ID, product reference, quantity, and optional order grouping\n- **Type Safety**: Zod schemas for runtime validation and TypeScript type generation\n\n### Component Architecture\n- **Layout**: Three-column responsive grid (1fr 2fr 1fr ratio)\n- **CategoryList**: Left sidebar with touch-friendly 60px height items\n- **ProductGrid**: Center area with 2-3 column responsive product cards\n- **OrderSummary**: Right sidebar with order management and checkout\n- **Touch Optimization**: Minimum 48px touch targets and 140px card heights\n\n### Design System Features\n- **Color Palette**: Restaurant-themed green primary with light/dark mode support\n- **Typography**: Inter font via Google Fonts with weight variations for hierarchy\n- **Spacing**: Consistent Tailwind units (2, 4, 6, 8) for uniform layout\n- **Interactive States**: Hover elevations and active state feedback\n- **Accessibility**: Focus rings, ARIA labels, and semantic HTML structure\n\n## External Dependencies\n\n### UI and Styling\n- **@radix-ui/***: Comprehensive set of accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework with custom design tokens\n- **class-variance-authority**: Type-safe variant API for component styling\n- **lucide-react**: Modern icon library for consistent iconography\n\n### Data Management\n- **@tanstack/react-query**: Server state management and caching\n- **drizzle-orm**: Type-safe SQL query builder and migrations\n- **drizzle-zod**: Runtime schema validation integration\n- **@neondatabase/serverless**: PostgreSQL database connection (configured but not actively used)\n\n### Development Tools\n- **vite**: Fast build tool with HMR and TypeScript support\n- **tsx**: TypeScript execution for server development\n- **@replit/vite-plugin-***: Replit-specific development enhancements\n- **esbuild**: Fast JavaScript bundler for production builds\n\n### Form and Validation\n- **react-hook-form**: Performant form library with minimal re-renders\n- **@hookform/resolvers**: Validation resolver integrations\n- **zod**: TypeScript-first schema validation\n\n### Additional Libraries\n- **date-fns**: Modern date utility library\n- **wouter**: Lightweight routing solution\n- **express**: Web application framework for Node.js\n- **cmdk**: Command palette component for search functionality","size_bytes":3871},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        success: \"hsl(var(--chart-2) / <alpha-value>)\",\n        warning: \"hsl(var(--chart-3) / <alpha-value>)\",\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4162},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport Stripe from \"stripe\";\nimport { storage } from \"./storage\";\nimport { insertCategorySchema, insertProductSchema, insertOrderItemSchema, insertTableSchema, sendToKitchenSchema, completePaymentColombianSchema } from \"@shared/schema\";\nimport { PaymentService, type ColombianPaymentData } from \"./payments-service\";\nimport { getN8nClient } from \"./n8n-client\";\nimport { randomUUID } from \"crypto\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error('Missing required Stripe secret: STRIPE_SECRET_KEY');\n}\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2023-10-16\",\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Categories API\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ error: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(400).json({ error: \"Invalid category data\" });\n    }\n  });\n\n  // Products API\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const { categoryId } = req.query;\n      \n      if (categoryId && typeof categoryId === 'string') {\n        const products = await storage.getProductsByCategory(categoryId);\n        res.json(products);\n      } else {\n        const products = await storage.getProducts();\n        res.json(products);\n      }\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ error: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(400).json({ error: \"Invalid product data\" });\n    }\n  });\n\n  // Order Items API - Mesa-scoped\n  app.get(\"/api/order-items\", async (req, res) => {\n    try {\n      const { mesa_id } = req.query;\n      \n      if (!mesa_id || typeof mesa_id !== 'string') {\n        return res.status(400).json({ error: \"mesa_id query parameter is required\" });\n      }\n      \n      const mesaId = parseInt(mesa_id);\n      if (isNaN(mesaId) || mesaId <= 0) {\n        return res.status(400).json({ error: \"mesa_id must be a positive integer\" });\n      }\n      \n      const orderItems = await storage.getOrderItems(mesaId);\n      \n      // Enhance order items with product details\n      const orderItemsWithProducts = await Promise.all(\n        orderItems.map(async (item) => {\n          const product = await storage.getProduct(item.productId);\n          if (!product) {\n            throw new Error(`Product not found for order item ${item.id}`);\n          }\n          return {\n            ...item,\n            product,\n            subtotal: item.quantity * parseFloat(product.price),\n          };\n        })\n      );\n      \n      res.json(orderItemsWithProducts);\n    } catch (error) {\n      console.error(\"Error fetching order items:\", error);\n      res.status(500).json({ error: \"Failed to fetch order items\" });\n    }\n  });\n\n  app.post(\"/api/order-items\", async (req, res) => {\n    try {\n      const orderItemData = insertOrderItemSchema.parse(req.body);\n      \n      // Validate product exists before creating order item\n      const product = await storage.getProduct(orderItemData.productId);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      \n      // SERVER-SIDE SAFEGUARD: Check if this is first item for the table\n      const existingItems = await storage.getOrderItems(orderItemData.mesaId);\n      const isFirstItem = existingItems.length === 0;\n      let tableStatusChanged = false;\n      \n      // If first item, automatically mark table as occupied\n      if (isFirstItem) {\n        try {\n          const table = await storage.getTable(orderItemData.mesaId);\n          if (table && table.status === \"available\") {\n            await storage.updateTableStatus(orderItemData.mesaId, \"occupied\");\n            tableStatusChanged = true;\n            console.log(`SERVER-SIDE: Table ${orderItemData.mesaId} automatically marked as occupied on first order item`);\n          }\n        } catch (error) {\n          console.error(`Failed to auto-update table ${orderItemData.mesaId} status:`, error);\n          // Don't fail the order creation if table status update fails\n        }\n      }\n      \n      const orderItem = await storage.createOrderItem(orderItemData);\n      \n      const orderItemWithProduct = {\n        ...orderItem,\n        product,\n        subtotal: orderItem.quantity * parseFloat(product.price),\n        // Include hint for frontend to invalidate tables cache if needed\n        tableStatusChanged,\n      };\n      \n      res.status(201).json(orderItemWithProduct);\n    } catch (error) {\n      console.error(\"Error creating order item:\", error);\n      res.status(400).json({ error: \"Invalid order item data\" });\n    }\n  });\n\n  app.put(\"/api/order-items/:id\", async (req, res) => {\n    try {\n      const { quantity, mesa_id } = req.body;\n      \n      if (!quantity || typeof quantity !== 'number' || quantity < 1) {\n        return res.status(400).json({ error: \"Invalid quantity\" });\n      }\n      \n      if (!mesa_id || typeof mesa_id !== 'number' || mesa_id <= 0) {\n        return res.status(400).json({ error: \"mesa_id is required and must be a positive integer\" });\n      }\n      \n      const orderItem = await storage.updateOrderItemQuantity(req.params.id, quantity, mesa_id);\n      if (!orderItem) {\n        return res.status(404).json({ error: \"Order item not found or does not belong to this mesa\" });\n      }\n      \n      // Return enhanced order item with product details\n      const product = await storage.getProduct(orderItem.productId);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      \n      const orderItemWithProduct = {\n        ...orderItem,\n        product,\n        subtotal: orderItem.quantity * parseFloat(product.price),\n      };\n      \n      res.json(orderItemWithProduct);\n    } catch (error) {\n      console.error(\"Error updating order item:\", error);\n      res.status(500).json({ error: \"Failed to update order item\" });\n    }\n  });\n\n  app.delete(\"/api/order-items/:id\", async (req, res) => {\n    try {\n      const { mesa_id } = req.query;\n      \n      if (!mesa_id || typeof mesa_id !== 'string') {\n        return res.status(400).json({ error: \"mesa_id query parameter is required\" });\n      }\n      \n      const mesaId = parseInt(mesa_id);\n      if (isNaN(mesaId) || mesaId <= 0) {\n        return res.status(400).json({ error: \"mesa_id must be a positive integer\" });\n      }\n      \n      const success = await storage.deleteOrderItem(req.params.id, mesaId);\n      if (!success) {\n        return res.status(404).json({ error: \"Order item not found or does not belong to this mesa\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting order item:\", error);\n      res.status(500).json({ error: \"Failed to delete order item\" });\n    }\n  });\n\n  // Send order to kitchen via n8n webhook\n  app.post(\"/api/orders/send-to-kitchen\", async (req, res) => {\n    try {\n      // Validate request body with Zod schema\n      const validatedData = sendToKitchenSchema.parse(req.body);\n      const { mesa_id, mesero_id, numberOfPeople } = validatedData;\n      \n      const orderItems = await storage.getOrderItems(mesa_id);\n      \n      if (orderItems.length === 0) {\n        return res.status(400).json({ success: false, error: \"No items in current order\" });\n      }\n\n      // Prepare data in the format expected by n8n\n      const orderData = {\n        mesa_id: mesa_id, // Already validated as number by Zod\n        mesero_id: mesero_id, // Already validated as number by Zod\n        numero_personas: numberOfPeople || null, // Optional field\n        productos: orderItems.map(item => {\n          const producto_id = parseInt(item.productId);\n          // Validate that producto_id is a valid number\n          if (!Number.isFinite(producto_id)) {\n            throw new Error(`Invalid product ID: ${item.productId}`);\n          }\n          return {\n            producto_id,\n            cantidad: item.quantity\n          };\n        })\n      };\n\n      // Send to n8n webhook\n      const n8nUrl = process.env.N8N_NUEVO_PEDIDO_URL;\n      if (!n8nUrl) {\n        return res.status(500).json({ success: false, error: \"N8N webhook URL not configured\" });\n      }\n\n      console.log(\"Sending order to n8n:\", orderData);\n      \n      // Create AbortController for timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n      \n      const response = await fetch(n8nUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(orderData),\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        let errorMessage = 'Error al procesar el pedido';\n        try {\n          const contentType = response.headers.get('content-type');\n          if (contentType && contentType.includes('application/json')) {\n            const errorData = await response.json();\n            errorMessage = errorData.message || errorData.error || errorMessage;\n          } else {\n            const text = await response.text();\n            errorMessage = text || `Error ${response.status}: ${response.statusText}`;\n          }\n        } catch {\n          errorMessage = `Error ${response.status}: ${response.statusText}`;\n        }\n        console.error(\"n8n error response:\", errorMessage);\n        return res.status(response.status).json({ success: false, error: errorMessage });\n      }\n\n      // If successful, clear the order and update table status to \"occupied\"\n      await storage.clearOrderItems(mesa_id);\n      \n      // Actualizar el estado de la mesa a \"occupied\" después de enviar el pedido\n      try {\n        const updatedTable = await storage.updateTableStatus(mesa_id, \"occupied\");\n        if (updatedTable) {\n          console.log(`Mesa ${mesa_id} status updated to \"occupied\" after order sent`);\n        }\n      } catch (error) {\n        console.error(`Error updating table ${mesa_id} status:`, error);\n        // No fallar el envío del pedido si no se puede actualizar la mesa\n      }\n      \n      let responseData = null;\n      try {\n        const contentType = response.headers.get('content-type');\n        if (contentType && contentType.includes('application/json')) {\n          responseData = await response.json();\n        } else {\n          responseData = await response.text();\n        }\n      } catch {\n        // If we can't parse the response, that's OK for success case\n        responseData = { status: 'sent' };\n      }\n      \n      console.log(\"Order successfully sent to n8n:\", responseData);\n      res.json({ \n        success: true, \n        message: '¡Pedido enviado a cocina!',\n        data: responseData\n      });\n    } catch (error) {\n      console.error('Error sending order to n8n:', error);\n      \n      let errorMessage = 'Error interno del servidor';\n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          errorMessage = 'Timeout al conectar con la cocina. Intenta de nuevo.';\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      \n      res.status(500).json({ \n        success: false, \n        error: errorMessage\n      });\n    }\n  });\n\n  // Tables/Mesas API\n  app.get(\"/api/tables\", async (req, res) => {\n    try {\n      const tables = await storage.getTables();\n      console.log(\"Fetching all tables, found:\", tables.length);\n      res.json(tables);\n    } catch (error) {\n      console.error(\"Error fetching tables:\", error);\n      res.status(500).json({ error: \"Failed to fetch tables\" });\n    }\n  });\n\n  app.get(\"/api/tables/:id\", async (req, res) => {\n    try {\n      const tableId = parseInt(req.params.id);\n      if (isNaN(tableId) || tableId <= 0) {\n        return res.status(400).json({ error: \"Invalid table ID\" });\n      }\n      \n      const table = await storage.getTable(tableId);\n      if (!table) {\n        return res.status(404).json({ error: \"Table not found\" });\n      }\n      \n      console.log(`Fetching table ${tableId}:`, table);\n      res.json(table);\n    } catch (error) {\n      console.error(\"Error fetching table:\", error);\n      res.status(500).json({ error: \"Failed to fetch table\" });\n    }\n  });\n\n  app.put(\"/api/tables/:id/status\", async (req, res) => {\n    try {\n      const tableId = parseInt(req.params.id);\n      if (isNaN(tableId) || tableId <= 0) {\n        return res.status(400).json({ error: \"Invalid table ID\" });\n      }\n      \n      const { status } = req.body;\n      if (!status || typeof status !== 'string') {\n        return res.status(400).json({ error: \"Status is required and must be a string\" });\n      }\n      \n      // Validar que el status sea uno de los valores permitidos\n      const validStatuses = ['available', 'occupied', 'reserved'];\n      if (!validStatuses.includes(status)) {\n        return res.status(400).json({ error: `Status must be one of: ${validStatuses.join(', ')}` });\n      }\n      \n      const updatedTable = await storage.updateTableStatus(tableId, status);\n      if (!updatedTable) {\n        return res.status(404).json({ error: \"Table not found\" });\n      }\n      \n      console.log(`Updated table ${tableId} status to \"${status}\":`, updatedTable);\n      res.json(updatedTable);\n    } catch (error) {\n      console.error(\"Error updating table status:\", error);\n      res.status(500).json({ error: \"Failed to update table status\" });\n    }\n  });\n\n  // In-memory idempotency cache (simple implementation)\n  const idempotencyCache = new Map<string, any>();\n  const IDEMPOTENCY_TTL = 10 * 60 * 1000; // 10 minutes\n\n  // Colombian Payment Processing - SumaPOS Colombia\n  app.post(\"/api/payments/complete-colombian\", async (req, res) => {\n    try {\n      // Validate request body with Zod schema\n      const validatedPayload = completePaymentColombianSchema.parse(req.body);\n      const { \n        tableId, \n        paymentMethod, \n        subtotal,\n        impoconsumo,\n        tip = 0, \n        discount = 0,\n        discountType = 'percentage',\n        cashReceived,\n        datafonoTransactionId,\n        datafonoType,\n        qrReference\n      } = validatedPayload;\n\n      // Generate idempotency key and check cache\n      const idempotencyKey = `payment_${tableId}_${paymentMethod}_${Date.now()}_${randomUUID().slice(0, 8)}`;\n      const cacheKey = `${tableId}_${paymentMethod}_${JSON.stringify({ tip, discount, cashReceived, datafonoTransactionId, qrReference })}`;\n      \n      // Check for duplicate request\n      const cachedResponse = idempotencyCache.get(cacheKey);\n      if (cachedResponse) {\n        console.log(`Idempotent request detected for table ${tableId}, returning cached response`);\n        return res.json(cachedResponse);\n      }\n\n      // Get order items for authoritative calculation\n      const orderItems = await storage.getOrderItems(tableId);\n      if (orderItems.length === 0) {\n        return res.status(400).json({ error: \"No order items found for this table\" });\n      }\n\n      // Calculate authoritative server-side subtotal\n      let serverSubtotal = 0;\n      const enhancedOrderItems = [];\n      for (const item of orderItems) {\n        const product = await storage.getProduct(item.productId);\n        if (product) {\n          const itemSubtotal = item.quantity * parseFloat(product.price);\n          serverSubtotal += itemSubtotal;\n          enhancedOrderItems.push({\n            ...item,\n            product,\n            subtotal: itemSubtotal\n          });\n        }\n      }\n\n      // Generate temporary employee ID for admin (TODO: Get from auth context in future)\n      const tempEmployeeId = randomUUID(); \n      \n      // Prepare Colombian payment data for PaymentService validation\n      const paymentData: ColombianPaymentData = {\n        tableId,\n        employeeId: tempEmployeeId,\n        paymentMethod: paymentMethod as any,\n        subtotal: serverSubtotal,\n        tip,\n        discount,\n        discountType,\n        cashReceived,\n        datafonoTransactionId,\n        datafonoType,\n        qrReference\n      };\n\n      // Validate and process payment using PaymentService\n      let processedPayment;\n      try {\n        processedPayment = PaymentService.processColombianPayment(paymentData);\n      } catch (validationError) {\n        console.error('Colombian payment validation failed:', validationError);\n        return res.status(400).json({ \n          error: validationError instanceof Error ? validationError.message : \"Payment validation failed\" \n        });\n      }\n\n      const { payment, calculation } = processedPayment;\n\n      // Use the same idempotency key for consistency\n\n      // Trigger Colombian payment workflow via n8n with idempotency\n      const n8nClient = getN8nClient();\n      const paymentWorkflowResponse = await n8nClient.processColombianPayment({\n        tableId,\n        employeeId: tempEmployeeId,\n        paymentMethod,\n        amount: calculation.finalTotal,\n        subtotal: calculation.subtotal,\n        impoconsumo: calculation.impoconsumo,\n        tip: calculation.tip,\n        items: enhancedOrderItems\n      });\n\n      if (!paymentWorkflowResponse.success) {\n        console.error('N8N payment workflow failed:', paymentWorkflowResponse.error);\n        return res.status(500).json({ \n          error: \"Payment processing failed\", \n          details: paymentWorkflowResponse.error \n        });\n      }\n\n      // Create Payment record (basic implementation)\n      const paymentId = paymentWorkflowResponse.executionId || randomUUID();\n      const createdPayment = {\n        ...payment,\n        id: paymentId,\n        createdAt: new Date().toISOString()\n      };\n      \n      console.log('Payment record created:', createdPayment);\n\n      // Generate and create Invoice record\n      const invoiceNumber = `COL-${Date.now()}-${tableId}`;\n      const invoice = PaymentService.generateBasicInvoice(\n        createdPayment as any,\n        invoiceNumber\n      );\n\n      const createdInvoice = {\n        ...invoice,\n        id: randomUUID(),\n        createdAt: new Date().toISOString()\n      };\n      \n      console.log('Invoice record created:', createdInvoice);\n\n      // Trigger DIAN invoice generation workflow\n      const invoiceWorkflowResponse = await n8nClient.generateDianInvoice({\n        paymentId: paymentId,\n        invoiceNumber,\n        nit: process.env.RESTAURANT_NIT || \"900123456-1\",\n        clientName: \"CONSUMIDOR FINAL\",\n        subtotal: calculation.subtotal,\n        impoconsumo: calculation.impoconsumo,\n        totalAmount: calculation.finalTotal\n      });\n\n      if (!invoiceWorkflowResponse.success) {\n        console.warn('DIAN invoice generation failed (non-fatal):', invoiceWorkflowResponse.error);\n        // Continue - invoice generation failure doesn't block payment\n      }\n\n      // Trigger analytics calculation workflow\n      await n8nClient.calculateAnalytics({\n        date: new Date().toISOString().split('T')[0],\n        restaurantId: process.env.RESTAURANT_ID || 'sumapos-colombia',\n        includeEmployeeMetrics: false,\n        includePeakHours: false\n      });\n\n      // Payment completed successfully - clear order items and free table\n      await storage.clearOrderItems(tableId);\n      await storage.updateTableStatus(tableId, \"available\");\n\n      // Log successful Colombian payment\n      console.log(`Colombian payment completed for table ${tableId}:`, {\n        paymentMethod,\n        finalTotal: calculation.finalTotal,\n        impoconsumo: calculation.impoconsumo,\n        change: calculation.change,\n        tip: calculation.tip,\n        discount: calculation.discount,\n        invoiceNumber,\n        n8nExecutionId: paymentWorkflowResponse.executionId,\n        idempotencyKey,\n        timestamp: new Date().toISOString(),\n      });\n\n      // Construct final response\n      const responseData = {\n        success: true,\n        message: \"¡Pago colombiano completado exitosamente!\",\n        data: {\n          tableId,\n          paymentMethod,\n          paymentMethodName: PaymentService.getPaymentMethodDescription(paymentMethod as any),\n          amount: PaymentService.formatColombianPrice(calculation.finalTotal),\n          calculation: {\n            subtotal: PaymentService.formatColombianPrice(calculation.subtotal),\n            impoconsumo: PaymentService.formatColombianPrice(calculation.impoconsumo),\n            tip: PaymentService.formatColombianPrice(calculation.tip),\n            discount: PaymentService.formatColombianPrice(calculation.discount),\n            finalTotal: PaymentService.formatColombianPrice(calculation.finalTotal),\n            change: calculation.change ? PaymentService.formatColombianPrice(calculation.change) : undefined\n          },\n          invoice: {\n            id: createdInvoice.id,\n            number: invoiceNumber,\n            cufe: createdInvoice.cufe,\n            status: invoiceWorkflowResponse.success ? 'generated' : 'pending'\n          },\n          payment: {\n            id: paymentId,\n            createdAt: createdPayment.createdAt\n          },\n          workflows: {\n            payment: paymentWorkflowResponse.executionId,\n            invoice: invoiceWorkflowResponse.executionId\n          },\n          idempotencyKey\n        }\n      };\n\n      // Cache the response with TTL cleanup\n      idempotencyCache.set(cacheKey, responseData);\n      setTimeout(() => {\n        idempotencyCache.delete(cacheKey);\n      }, IDEMPOTENCY_TTL);\n\n      res.json(responseData);\n    } catch (error) {\n      console.error('Error processing Colombian payment:', error);\n      res.status(500).json({ \n        error: 'Error interno procesando pago colombiano', \n        message: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // Create Stripe payment intent\n  app.post(\"/api/create-payment-intent\", async (req, res) => {\n    try {\n      const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY || process.env.TESTING_STRIPE_SECRET_KEY);\n      const { tableId, tip = 0, discount = 0, discountType = 'percentage' } = req.body;\n\n      if (!tableId || typeof tableId !== 'number') {\n        return res.status(400).json({ error: \"Valid table ID is required\" });\n      }\n\n      // Get order items from server-side storage (authoritative)\n      const orderItems = await storage.getOrderItems(tableId);\n      if (orderItems.length === 0) {\n        return res.status(400).json({ error: \"No order items found for this table\" });\n      }\n\n      // Calculate totals on server-side (authoritative)\n      let subtotal = 0;\n      for (const item of orderItems) {\n        const product = await storage.getProduct(item.productId);\n        if (product) {\n          subtotal += item.quantity * parseFloat(product.price);\n        }\n      }\n\n      // Apply discount\n      const discountAmount = discountType === 'percentage' \n        ? Math.round((subtotal * discount) / 100 * 100) / 100\n        : discount;\n      const finalSubtotal = Math.max(0, subtotal - discountAmount);\n      \n      // Calculate Impoconsumo and final total (8% Colombia)\n      const tax = Math.round(finalSubtotal * 0.08 * 100) / 100;\n      const tipAmount = Math.round(tip * 100) / 100;\n      const finalTotal = finalSubtotal + tax + tipAmount;\n      \n      // Convert to cents for Stripe\n      const amountInCents = Math.round(finalTotal * 100);\n\n      // Create payment intent with Stripe\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: amountInCents,\n        currency: 'eur',\n        metadata: {\n          tableId: tableId.toString(),\n          subtotal: subtotal.toString(),\n          discount: discountAmount.toString(),\n          tax: tax.toString(),\n          tip: tipAmount.toString(),\n          finalTotal: finalTotal.toString(),\n        },\n      });\n\n      res.json({\n        clientSecret: paymentIntent.client_secret,\n        paymentIntentId: paymentIntent.id,\n        calculatedTotals: {\n          subtotal,\n          discount: discountAmount,\n          tax,\n          tip: tipAmount,\n          total: finalTotal,\n        },\n      });\n    } catch (error) {\n      console.error('Error creating payment intent:', error);\n      res.status(500).json({ error: 'Failed to create payment intent' });\n    }\n  });\n\n  // Complete payment and clear table\n  app.post(\"/api/complete-payment\", async (req, res) => {\n    try {\n      const { \n        tableId, \n        paymentMethod, \n        cashReceived, \n        tip = 0, \n        discount = 0,\n        discountType = 'percentage',\n        paymentIntentId \n      } = req.body;\n\n      if (!tableId || typeof tableId !== 'number') {\n        return res.status(400).json({ error: \"Valid table ID is required\" });\n      }\n\n      if (!paymentMethod || !['cash', 'card'].includes(paymentMethod)) {\n        return res.status(400).json({ error: \"Valid payment method is required\" });\n      }\n\n      // Get order items from server-side storage (authoritative)\n      const orderItems = await storage.getOrderItems(tableId);\n      if (orderItems.length === 0) {\n        return res.status(400).json({ error: \"No order items found for this table\" });\n      }\n\n      // Calculate authoritative totals on server-side\n      let subtotal = 0;\n      for (const item of orderItems) {\n        const product = await storage.getProduct(item.productId);\n        if (product) {\n          subtotal += item.quantity * parseFloat(product.price);\n        }\n      }\n\n      // Apply discount\n      const discountAmount = discountType === 'percentage' \n        ? Math.round((subtotal * discount) / 100 * 100) / 100\n        : discount;\n      const finalSubtotal = Math.max(0, subtotal - discountAmount);\n      \n      // Calculate Impoconsumo and final total (8% Colombia)\n      const tax = Math.round(finalSubtotal * 0.08 * 100) / 100;\n      const tipAmount = Math.round(tip * 100) / 100;\n      const finalTotal = finalSubtotal + tax + tipAmount;\n\n      // Validate payment method specific requirements\n      if (paymentMethod === 'cash') {\n        if (!cashReceived || typeof cashReceived !== 'number' || cashReceived < finalTotal) {\n          return res.status(400).json({ \n            error: \"Insufficient cash received\",\n            required: finalTotal,\n            received: cashReceived \n          });\n        }\n      }\n\n      if (paymentMethod === 'card') {\n        if (!paymentIntentId) {\n          return res.status(400).json({ error: \"Payment intent ID is required for card payments\" });\n        }\n\n        // Verify payment with Stripe\n        const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY || process.env.TESTING_STRIPE_SECRET_KEY);\n        try {\n          const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n          \n          if (paymentIntent.status !== 'succeeded') {\n            return res.status(400).json({ error: \"Payment not completed in Stripe\" });\n          }\n\n          const expectedAmountInCents = Math.round(finalTotal * 100);\n          if (paymentIntent.amount !== expectedAmountInCents) {\n            return res.status(400).json({ \n              error: \"Payment amount mismatch\",\n              expected: expectedAmountInCents,\n              received: paymentIntent.amount \n            });\n          }\n\n          if (paymentIntent.metadata.tableId !== tableId.toString()) {\n            return res.status(400).json({ error: \"Payment intent does not match table ID\" });\n          }\n        } catch (stripeError) {\n          console.error('Stripe verification error:', stripeError);\n          return res.status(400).json({ error: \"Failed to verify payment with Stripe\" });\n        }\n      }\n\n      // Payment verified - clear order items and free table\n      await storage.clearOrderItems(tableId);\n      await storage.updateTableStatus(tableId, \"available\");\n\n      const change = paymentMethod === 'cash' ? Math.round((cashReceived - finalTotal) * 100) / 100 : 0;\n\n      // Log payment completion\n      console.log(`Payment completed for table ${tableId}:`, {\n        paymentMethod,\n        finalTotal,\n        cashReceived,\n        change,\n        tip: tipAmount,\n        discount: discountAmount,\n        paymentIntentId,\n        timestamp: new Date().toISOString(),\n      });\n\n      res.json({\n        success: true,\n        message: \"Payment completed successfully\",\n        tableId,\n        paymentMethod,\n        amount: finalTotal,\n        tip: tipAmount,\n        discount: discountAmount,\n        change,\n      });\n    } catch (error) {\n      console.error('Error completing payment:', error);\n      res.status(500).json({ error: 'Failed to complete payment' });\n    }\n  });\n\n  // Admin KPIs endpoint\n  app.get(\"/api/admin/kpis\", async (req, res) => {\n    try {\n      const n8nUrl = process.env.N8N_ADMIN_KPI_URL;\n      if (!n8nUrl) {\n        return res.status(500).json({ error: \"N8N admin KPIs URL not configured\" });\n      }\n\n      console.log(\"Fetching admin KPIs from n8n:\", n8nUrl);\n      \n      // Create AbortController for timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n      \n      const response = await fetch(n8nUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        let errorMessage = 'Error al obtener KPIs administrativos';\n        try {\n          const contentType = response.headers.get('content-type');\n          if (contentType && contentType.includes('application/json')) {\n            const errorData = await response.json();\n            errorMessage = errorData.message || errorData.error || errorMessage;\n          } else {\n            const text = await response.text();\n            errorMessage = text || `Error ${response.status}: ${response.statusText}`;\n          }\n        } catch {\n          errorMessage = `Error ${response.status}: ${response.statusText}`;\n        }\n        console.error(\"n8n admin KPIs error response:\", errorMessage);\n        return res.status(response.status).json({ error: errorMessage });\n      }\n\n      let responseData = null;\n      try {\n        const contentType = response.headers.get('content-type');\n        if (contentType && contentType.includes('application/json')) {\n          responseData = await response.json();\n        } else {\n          responseData = await response.text();\n        }\n      } catch {\n        // If we can't parse the response, return error\n        return res.status(500).json({ error: 'Invalid response format from n8n' });\n      }\n      \n      console.log(\"Admin KPIs received from n8n:\", responseData);\n      \n      // Transform string values from n8n to numbers for frontend compatibility\n      const transformedData = {\n        ventas_hoy: parseFloat(responseData.ventas_hoy) || 0,\n        personal_activo: parseInt(responseData.personal_activo) || 0,\n        mesas_ocupadas: parseInt(responseData.mesas_ocupadas) || 0,\n        mesas_totales: parseInt(responseData.mesas_totales) || 0\n      };\n      \n      console.log(\"Transformed KPIs data (strings to numbers):\", transformedData);\n      res.json(transformedData);\n    } catch (error) {\n      console.error('Error fetching admin KPIs from n8n:', error);\n      \n      let errorMessage = 'Error interno del servidor';\n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          errorMessage = 'Timeout al conectar con el servidor de KPIs. Intenta de nuevo.';\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      \n      res.status(500).json({ \n        error: errorMessage\n      });\n    }\n  });\n\n  // Endpoint para obtener pedido existente por mesa desde n8n\n  app.get(\"/api/pedido/mesa/:id\", async (req, res) => {\n    try {\n      const mesaId = req.params.id;\n      const n8nBaseUrl = process.env.N8N_ORDER_BASE_URL;\n      \n      if (!n8nBaseUrl) {\n        return res.status(500).json({ error: \"N8N order base URL not configured\" });\n      }\n\n      console.log(`Fetching existing order for mesa ${mesaId} from n8n`);\n      \n      // Construir URL dinámica para obtener pedido por mesa\n      const n8nUrl = `${n8nBaseUrl}/api/pedido/mesa/${mesaId}`;\n      \n      // Create AbortController for timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n      \n      const response = await fetch(n8nUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        let errorMessage = 'Error al obtener pedido de la mesa';\n        try {\n          const contentType = response.headers.get('content-type');\n          if (contentType && contentType.includes('application/json')) {\n            const errorData = await response.json();\n            errorMessage = errorData.message || errorData.error || errorMessage;\n          } else {\n            const text = await response.text();\n            errorMessage = text || `Error ${response.status}: ${response.statusText}`;\n          }\n        } catch {\n          errorMessage = `Error ${response.status}: ${response.statusText}`;\n        }\n        console.error(`n8n order fetch error for mesa ${mesaId}:`, errorMessage);\n        return res.status(response.status).json({ error: errorMessage });\n      }\n\n      let responseData = null;\n      try {\n        const contentType = response.headers.get('content-type');\n        if (contentType && contentType.includes('application/json')) {\n          responseData = await response.json();\n        } else {\n          responseData = await response.text();\n        }\n      } catch {\n        return res.status(500).json({ error: 'Invalid response format from n8n' });\n      }\n      \n      console.log(`Order data received from n8n for mesa ${mesaId}:`, responseData);\n      res.json(responseData);\n    } catch (error) {\n      console.error('Error fetching order from n8n:', error);\n      \n      let errorMessage = 'Error interno del servidor';\n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          errorMessage = 'Timeout al conectar con el servidor de pedidos. Intenta de nuevo.';\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      \n      res.status(500).json({ \n        error: errorMessage\n      });\n    }\n  });\n\n  // Stripe payment endpoint\n  app.post(\"/api/create-payment-intent\", async (req, res) => {\n    try {\n      const { amount, tableNumber, orderItems } = req.body;\n      \n      if (!amount || amount <= 0) {\n        return res.status(400).json({ error: \"Invalid amount\" });\n      }\n      \n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert to cents\n        currency: \"eur\",\n        metadata: {\n          tableNumber: tableNumber?.toString() || '',\n          orderCount: orderItems?.length?.toString() || '0'\n        }\n      });\n      \n      res.json({ \n        clientSecret: paymentIntent.client_secret,\n        paymentIntentId: paymentIntent.id\n      });\n    } catch (error: any) {\n      console.error(\"Error creating payment intent:\", error);\n      res.status(500).json({ \n        error: \"Error creating payment intent: \" + error.message \n      });\n    }\n  });\n\n  // Complete payment and clear table\n  app.post(\"/api/complete-payment\", async (req, res) => {\n    try {\n      const { tableId, paymentMethod, paymentIntentId, tip = 0 } = req.body;\n      \n      if (!tableId) {\n        return res.status(400).json({ error: \"Table ID is required\" });\n      }\n\n      // Clear order items for this table\n      await storage.clearOrderItems(parseInt(tableId));\n      \n      // Set table status to available\n      await storage.updateTableStatus(parseInt(tableId), \"available\");\n      \n      res.json({ \n        success: true, \n        message: \"Pago completado y mesa liberada\",\n        tableId,\n        paymentMethod,\n        tip\n      });\n    } catch (error: any) {\n      console.error(\"Error completing payment:\", error);\n      res.status(500).json({ \n        error: \"Error completing payment: \" + error.message \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":37611},"server/storage.ts":{"content":"import { \n  type Category, \n  type Product, \n  type OrderItem, \n  type OrderItemWithProduct,\n  type Table,\n  type InsertCategory,\n  type InsertProduct,\n  type InsertOrderItem,\n  type InsertTable\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Categories\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  \n  // Products\n  getProducts(): Promise<Product[]>;\n  getProductsByCategory(categoryId: string): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  \n  // Order Items - Mesa-scoped operations\n  getOrderItems(mesaId: number): Promise<OrderItem[]>;\n  createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem>;\n  updateOrderItemQuantity(id: string, quantity: number, mesaId: number): Promise<OrderItem | undefined>;\n  deleteOrderItem(id: string, mesaId: number): Promise<boolean>;\n  clearOrderItems(mesaId: number): Promise<void>;\n  \n  // Tables/Mesas\n  getTables(): Promise<Table[]>;\n  getTable(id: number): Promise<Table | undefined>;\n  updateTableStatus(id: number, status: string): Promise<Table | undefined>;\n  createTable(table: InsertTable): Promise<Table>;\n}\n\nexport class MemStorage implements IStorage {\n  private categories: Map<string, Category> = new Map();\n  private products: Map<string, Product> = new Map();\n  private orderItems: Map<string, OrderItem> = new Map();\n  private tables: Map<number, Table> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private seedData() {\n    // Seed categories\n    const categoriesData = [\n      { id: \"1\", name: \"Platos Principales\", icon: \"ChefHat\" },\n      { id: \"2\", name: \"Bebidas\", icon: \"Coffee\" },\n      { id: \"3\", name: \"Postres\", icon: \"Cake\" },\n    ];\n\n    categoriesData.forEach(cat => this.categories.set(cat.id, cat));\n\n    // Seed products\n    const productsData = [\n      { id: \"1\", name: \"Solomillo a la Pimienta\", description: \"Tierno solomillo de ternera con salsa de pimienta verde\", price: \"28.50\", categoryId: \"1\" },\n      { id: \"2\", name: \"Pescado del Día\", description: \"Pescado fresco a la plancha con verduras de temporada\", price: \"24.00\", categoryId: \"1\" },\n      { id: \"3\", name: \"Paella Valenciana\", description: \"Paella tradicional con pollo, conejo y judías verdes\", price: \"32.00\", categoryId: \"1\" },\n      { id: \"4\", name: \"Agua Mineral\", description: \"Agua mineral natural sin gas, botella 500ml\", price: \"2.50\", categoryId: \"2\" },\n      { id: \"5\", name: \"Refresco de Cola\", description: \"Refresco de cola frío, lata 330ml\", price: \"3.50\", categoryId: \"2\" },\n      { id: \"6\", name: \"Vino Tinto\", description: \"Vino tinto de la casa, copa 150ml\", price: \"4.50\", categoryId: \"2\" },\n      { id: \"7\", name: \"Flan de la Casa\", description: \"Flan casero con caramelo líquido y nata montada\", price: \"6.50\", categoryId: \"3\" },\n      { id: \"8\", name: \"Tarta de Queso\", description: \"Tarta de queso cremosa con mermelada de frutos rojos\", price: \"7.50\", categoryId: \"3\" },\n      { id: \"9\", name: \"Fruta de Temporada\", description: \"Selección de frutas frescas de temporada\", price: \"5.50\", categoryId: \"3\" },\n    ];\n\n    productsData.forEach(prod => this.products.set(prod.id, prod));\n\n    // Seed tables/mesas\n    const tablesData: Table[] = [\n      { id: 1, number: 1, capacity: 4, status: \"available\" },\n      { id: 2, number: 2, capacity: 2, status: \"occupied\" },\n      { id: 3, number: 3, capacity: 6, status: \"available\" },\n      { id: 4, number: 4, capacity: 4, status: \"reserved\" },\n      { id: 5, number: 5, capacity: 2, status: \"available\" },\n      { id: 6, number: 6, capacity: 8, status: \"available\" },\n      { id: 7, number: 7, capacity: 4, status: \"occupied\" },\n      { id: 8, number: 8, capacity: 2, status: \"available\" },\n    ];\n\n    tablesData.forEach(table => this.tables.set(table.id, table));\n  }\n\n  // Categories\n  async getCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values());\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const id = randomUUID();\n    const newCategory: Category = { ...category, id };\n    this.categories.set(id, newCategory);\n    return newCategory;\n  }\n\n  // Products\n  async getProducts(): Promise<Product[]> {\n    return Array.from(this.products.values());\n  }\n\n  async getProductsByCategory(categoryId: string): Promise<Product[]> {\n    return Array.from(this.products.values()).filter(product => product.categoryId === categoryId);\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const newProduct: Product = { ...product, id };\n    this.products.set(id, newProduct);\n    return newProduct;\n  }\n\n  // Order Items - Mesa-scoped\n  async getOrderItems(mesaId: number): Promise<OrderItem[]> {\n    return Array.from(this.orderItems.values()).filter(item => item.mesaId === mesaId);\n  }\n\n  async createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem> {\n    const id = randomUUID();\n    const newOrderItem: OrderItem = { \n      ...orderItem, \n      id,\n      quantity: orderItem.quantity ?? 1,\n      orderId: orderItem.orderId ?? null,\n      mesaId: orderItem.mesaId\n    };\n    this.orderItems.set(id, newOrderItem);\n    return newOrderItem;\n  }\n\n  async updateOrderItemQuantity(id: string, quantity: number, mesaId: number): Promise<OrderItem | undefined> {\n    const orderItem = this.orderItems.get(id);\n    if (orderItem && orderItem.mesaId === mesaId) {\n      orderItem.quantity = quantity;\n      this.orderItems.set(id, orderItem);\n    }\n    return orderItem;\n  }\n\n  async deleteOrderItem(id: string, mesaId: number): Promise<boolean> {\n    const orderItem = this.orderItems.get(id);\n    if (orderItem && orderItem.mesaId === mesaId) {\n      return this.orderItems.delete(id);\n    }\n    return false;\n  }\n\n  async clearOrderItems(mesaId: number): Promise<void> {\n    const itemsToDelete = Array.from(this.orderItems.entries())\n      .filter(([, item]) => item.mesaId === mesaId)\n      .map(([id]) => id);\n    \n    itemsToDelete.forEach(id => this.orderItems.delete(id));\n  }\n\n  // Tables/Mesas\n  async getTables(): Promise<Table[]> {\n    console.log('MemStorage: Getting all tables');\n    return Array.from(this.tables.values());\n  }\n\n  async getTable(id: number): Promise<Table | undefined> {\n    console.log('MemStorage: Getting table with id:', id);\n    return this.tables.get(id);\n  }\n\n  async updateTableStatus(id: number, status: string): Promise<Table | undefined> {\n    console.log(`MemStorage: Updating table ${id} status to:`, status);\n    const table = this.tables.get(id);\n    if (table) {\n      const updatedTable = { ...table, status };\n      this.tables.set(id, updatedTable);\n      console.log('MemStorage: Table updated successfully:', updatedTable);\n      return updatedTable;\n    }\n    console.log('MemStorage: Table not found for update:', id);\n    return undefined;\n  }\n\n  async createTable(table: InsertTable): Promise<Table> {\n    console.log('MemStorage: Creating new table:', table);\n    const newTable: Table = { ...table, status: table.status || \"available\" };\n    this.tables.set(newTable.id, newTable);\n    console.log('MemStorage: Table created successfully:', newTable);\n    return newTable;\n  }\n}\n\nimport { N8nStorage } from \"./n8n-storage\";\n\nexport const storage = new N8nStorage();\n","size_bytes":7479},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Categories table\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  icon: text(\"icon\").notNull(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  categoryId: varchar(\"category_id\").notNull(),\n});\n\n// Order items table\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  orderId: varchar(\"order_id\"),\n  mesaId: integer(\"mesa_id\").notNull(),\n});\n\n// Tables/Mesas table\nexport const tables = pgTable(\"tables\", {\n  id: integer(\"id\").primaryKey(),\n  number: integer(\"number\").notNull(),\n  capacity: integer(\"capacity\").notNull(),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"available\"),\n});\n\n// Create insert schemas\nexport const insertCategorySchema = createInsertSchema(categories).omit({ id: true });\nexport const insertProductSchema = createInsertSchema(products).omit({ id: true });\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({ id: true });\nexport const insertTableSchema = createInsertSchema(tables);\n\n// Create types\nexport type Category = typeof categories.$inferSelect;\nexport type Product = typeof products.$inferSelect;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type Table = typeof tables.$inferSelect;\n\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type InsertTable = z.infer<typeof insertTableSchema>;\n\n// Extended types for the frontend\nexport type ProductWithDetails = Product & {\n  categoryName?: string;\n};\n\nexport type OrderItemWithProduct = OrderItem & {\n  product: Product;\n  subtotal: number;\n};\n\n// Send to kitchen validation schema\nexport const sendToKitchenSchema = z.object({\n  mesa_id: z.number().int().positive(),\n  mesero_id: z.number().int().positive(),\n  numberOfPeople: z.number().int().positive().optional(),\n});\n\n// ========== MODELOS COLOMBIANOS - SumaPOS Colombia ==========\n\n// Empleados/Meseros table\nexport const employees = pgTable(\"employees\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  document: varchar(\"document\", { length: 20 }).notNull().unique(), // Cédula colombiana\n  phone: varchar(\"phone\", { length: 15 }),\n  email: varchar(\"email\", { length: 100 }),\n  role: varchar(\"role\", { length: 20 }).notNull().default(\"mesero\"), // mesero, cajero, chef, admin\n  salary: decimal(\"salary\", { precision: 10, scale: 2 }),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  startDate: timestamp(\"start_date\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Turnos de trabajo table\nexport const shifts = pgTable(\"shifts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull(),\n  startTime: timestamp(\"start_time\").notNull(),\n  endTime: timestamp(\"end_time\"),\n  breakMinutes: integer(\"break_minutes\").default(0),\n  hoursWorked: decimal(\"hours_worked\", { precision: 4, scale: 2 }),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"active\"), // active, completed, cancelled\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Pagos colombianos table\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tableId: integer(\"table_id\").notNull(),\n  employeeId: varchar(\"employee_id\").notNull(),\n  paymentMethod: varchar(\"payment_method\", { length: 20 }).notNull(), // efectivo, datafono_debito, datafono_credito, qr_bancolombia\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  impoconsumo: decimal(\"impoconsumo\", { precision: 10, scale: 2 }).notNull(), // 8% Colombia\n  tip: decimal(\"tip\", { precision: 10, scale: 2 }).default(\"0\"),\n  discount: decimal(\"discount\", { precision: 10, scale: 2 }).default(\"0\"),\n  discountType: varchar(\"discount_type\", { length: 10 }).default(\"percentage\"), // percentage, fixed\n  // Campos específicos para métodos colombianos\n  datafonoTransactionId: varchar(\"datafono_transaction_id\", { length: 50 }), // ID transacción datáfono\n  datafonoType: varchar(\"datafono_type\", { length: 10 }), // debito, credito\n  qrReference: varchar(\"qr_reference\", { length: 100 }), // Referencia QR Bancolombia\n  cashReceived: decimal(\"cash_received\", { precision: 10, scale: 2 }),\n  change: decimal(\"change\", { precision: 10, scale: 2 }),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"pending\"), // pending, completed, failed, refunded\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Facturas DIAN table\nexport const invoices = pgTable(\"invoices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  paymentId: varchar(\"payment_id\").notNull().unique(),\n  invoiceNumber: varchar(\"invoice_number\", { length: 50 }).notNull().unique(), // Numeración DIAN\n  cufe: varchar(\"cufe\", { length: 96 }).notNull().unique(), // Código Único de Facturación Electrónica\n  nit: varchar(\"nit\", { length: 20 }).notNull(), // NIT del restaurante\n  clientName: varchar(\"client_name\", { length: 100 }).default(\"CONSUMIDOR FINAL\"),\n  clientDocument: varchar(\"client_document\", { length: 20 }),\n  clientDocumentType: varchar(\"client_document_type\", { length: 5 }).default(\"CC\"), // CC, CE, NIT, etc.\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  impoconsumo: decimal(\"impoconsumo\", { precision: 10, scale: 2 }).notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  qrCode: text(\"qr_code\"), // QR DIAN\n  xmlSigned: text(\"xml_signed\"), // XML firmado DIAN\n  dianStatus: varchar(\"dian_status\", { length: 20 }).default(\"pending\"), // pending, approved, rejected\n  dianResponse: text(\"dian_response\"), // Respuesta completa DIAN\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  sentToDianAt: timestamp(\"sent_to_dian_at\"),\n});\n\n// Proveedores table\nexport const suppliers = pgTable(\"suppliers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  nit: varchar(\"nit\", { length: 20 }).unique(),\n  contact: varchar(\"contact\", { length: 100 }),\n  phone: varchar(\"phone\", { length: 15 }),\n  email: varchar(\"email\", { length: 100 }),\n  address: text(\"address\"),\n  city: varchar(\"city\", { length: 50 }),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  paymentTerms: varchar(\"payment_terms\", { length: 50 }), // contado, 30_dias, 60_dias\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Gastos table\nexport const expenses = pgTable(\"expenses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  supplierId: varchar(\"supplier_id\"),\n  employeeId: varchar(\"employee_id\").notNull(), // Quien registra el gasto\n  category: varchar(\"category\", { length: 50 }).notNull(), // ingredientes, servicios, mantenimiento, marketing, etc.\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  iva: decimal(\"iva\", { precision: 10, scale: 2 }).default(\"0\"), // Algunos gastos tienen IVA\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  receiptNumber: varchar(\"receipt_number\", { length: 50 }),\n  paymentMethod: varchar(\"payment_method\", { length: 20 }), // efectivo, transferencia, datafono, etc.\n  approvalStatus: varchar(\"approval_status\", { length: 20 }).default(\"pending\"), // pending, approved, rejected\n  expenseDate: timestamp(\"expense_date\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Cierres diarios table\nexport const closures = pgTable(\"closures\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull(), // Cajero que hace el cierre\n  date: timestamp(\"date\").notNull(), // Fecha del cierre\n  // Ingresos\n  totalSales: decimal(\"total_sales\", { precision: 10, scale: 2 }).notNull(),\n  totalImpoconsumo: decimal(\"total_impoconsumo\", { precision: 10, scale: 2 }).notNull(),\n  totalTips: decimal(\"total_tips\", { precision: 10, scale: 2 }).default(\"0\"),\n  // Métodos de pago\n  cashSales: decimal(\"cash_sales\", { precision: 10, scale: 2 }).default(\"0\"),\n  datafonoSales: decimal(\"datafono_sales\", { precision: 10, scale: 2 }).default(\"0\"),\n  qrSales: decimal(\"qr_sales\", { precision: 10, scale: 2 }).default(\"0\"),\n  // Cash management\n  expectedCash: decimal(\"expected_cash\", { precision: 10, scale: 2 }).notNull(),\n  actualCash: decimal(\"actual_cash\", { precision: 10, scale: 2 }),\n  cashDifference: decimal(\"cash_difference\", { precision: 10, scale: 2 }),\n  // Estadísticas\n  ordersCount: integer(\"orders_count\").default(0),\n  averageOrderValue: decimal(\"average_order_value\", { precision: 10, scale: 2 }),\n  busyHours: text(\"busy_hours\"), // JSON con horas pico\n  // Estado\n  status: varchar(\"status\", { length: 20 }).default(\"open\"), // open, closed, reviewed\n  notes: text(\"notes\"),\n  n8nWorkflowStatus: varchar(\"n8n_workflow_status\", { length: 20 }).default(\"pending\"), // pending, completed, failed\n  closedAt: timestamp(\"closed_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// ========== ESQUEMAS ZOD Y TIPOS COLOMBIANOS ==========\n\n// Create insert schemas para modelos colombianos\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertShiftSchema = createInsertSchema(shifts).omit({ id: true, createdAt: true });\nexport const insertPaymentSchema = createInsertSchema(payments).omit({ id: true, createdAt: true });\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({ id: true, createdAt: true, sentToDianAt: true });\nexport const insertSupplierSchema = createInsertSchema(suppliers).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertExpenseSchema = createInsertSchema(expenses).omit({ id: true, createdAt: true });\nexport const insertClosureSchema = createInsertSchema(closures).omit({ id: true, createdAt: true, closedAt: true });\n\n// Create select types para modelos colombianos\nexport type Employee = typeof employees.$inferSelect;\nexport type Shift = typeof shifts.$inferSelect;\nexport type Payment = typeof payments.$inferSelect;\nexport type Invoice = typeof invoices.$inferSelect;\nexport type Supplier = typeof suppliers.$inferSelect;\nexport type Expense = typeof expenses.$inferSelect;\nexport type Closure = typeof closures.$inferSelect;\n\n// Create insert types para modelos colombianos\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\nexport type InsertShift = z.infer<typeof insertShiftSchema>;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type InsertSupplier = z.infer<typeof insertSupplierSchema>;\nexport type InsertExpense = z.infer<typeof insertExpenseSchema>;\nexport type InsertClosure = z.infer<typeof insertClosureSchema>;\n\n// ========== TIPOS EXTENDIDOS COLOMBIANOS ==========\n\n// Payment con detalles del empleado\nexport type PaymentWithEmployee = Payment & {\n  employee: Employee;\n};\n\n// Invoice con detalles del payment\nexport type InvoiceWithPayment = Invoice & {\n  payment: Payment;\n};\n\n// Shift con detalles del empleado\nexport type ShiftWithEmployee = Shift & {\n  employee: Employee;\n};\n\n// Expense con detalles de supplier y employee\nexport type ExpenseWithDetails = Expense & {\n  supplier?: Supplier;\n  employee: Employee;\n};\n\n// Closure con estadísticas adicionales\nexport type ClosureWithStats = Closure & {\n  employee: Employee;\n  paymentsCount: number;\n  topSellingProducts?: Array<{\n    productName: string;\n    quantity: number;\n    revenue: number;\n  }>;\n};\n\n// ========== ESQUEMAS DE VALIDACIÓN ESPECÍFICOS ==========\n\n// Schema para métodos de pago colombianos\nexport const paymentMethodSchema = z.enum([\"efectivo\", \"datafono_debito\", \"datafono_credito\", \"qr_bancolombia\"]);\n\n// Schema para roles de empleados colombianos\nexport const employeeRoleSchema = z.enum([\"mesero\", \"cajero\", \"chef\", \"admin\", \"gerente\"]);\n\n// Schema para completar pago con método colombiano\nexport const completePaymentColombianSchema = z.object({\n  tableId: z.number().int().positive(),\n  employeeId: z.string().uuid(),\n  paymentMethod: paymentMethodSchema,\n  subtotal: z.number().min(0),\n  impoconsumo: z.number().min(0),\n  tip: z.number().min(0).default(0),\n  discount: z.number().min(0).default(0),\n  discountType: z.enum([\"percentage\", \"fixed\"]).default(\"percentage\"),\n  // Campos específicos por método\n  cashReceived: z.number().min(0).optional(),\n  datafonoTransactionId: z.string().optional(),\n  datafonoType: z.enum([\"debito\", \"credito\"]).optional(),\n  qrReference: z.string().optional(),\n});\n\n// Schema para cierre diario\nexport const closureSchema = z.object({\n  employeeId: z.string().uuid(),\n  date: z.date(),\n  expectedCash: z.number().min(0),\n  actualCash: z.number().min(0),\n  notes: z.string().optional(),\n});\n","size_bytes":13937},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SimpleToastProvider } from \"@/components/SimpleToast\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport Login from \"@/pages/login\";\nimport TableMap from \"@/pages/table-map\";\nimport Admin from \"@/pages/admin\";\nimport AdminMenu from \"@/pages/admin-menu\";\nimport AdminVentas from \"@/pages/admin-ventas\";\nimport AdminEmpleados from \"@/pages/admin-empleados\";\nimport AdminConfiguracion from \"@/pages/admin-configuracion\";\nimport POSSystem from \"@/pages/pos-system\";\nimport OrderManagement from \"@/pages/order-management\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Login} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/tables\" component={TableMap} />\n      <Route path=\"/table-map\" component={TableMap} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route path=\"/admin/menu\" component={AdminMenu} />\n      <Route path=\"/admin/ventas\" component={AdminVentas} />\n      <Route path=\"/admin/empleados\" component={AdminEmpleados} />\n      <Route path=\"/admin/configuracion\" component={AdminConfiguracion} />\n      <Route path=\"/order/:tableId\" component={POSSystem} />\n      <Route path=\"/order-management/:tableId\" component={OrderManagement} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <SimpleToastProvider>\n            <div style={{ position: 'relative', zIndex: 9999 }}>\n              <Toaster />\n            </div>\n            <Router />\n          </SimpleToastProvider>\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2044},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE - Modern Creative Theme */\n:root {\n  --button-outline: rgba(0,0,0, .08);\n  --badge-outline: rgba(0,0,0, .04);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -12; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .02);\n  --elevate-2: rgba(0,0,0, .06);\n\n  --background: 0 0% 100%;\n\n  --foreground: 220 15% 15%;\n\n  --border: 220 13% 91%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 15% 20%;\n\n  --card-border: 220 13% 88%;\n\n  --sidebar: 210 40% 96%;\n\n  --sidebar-foreground: 220 15% 25%;\n\n  --sidebar-border: 220 13% 88%;\n\n  --sidebar-primary: 210 100% 50%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 210 40% 92%;\n\n  --sidebar-accent-foreground: 210 40% 20%;\n\n  --sidebar-ring: 210 100% 50%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 220 15% 20%;\n\n  --popover-border: 220 13% 88%;\n\n  --primary: 210 100% 50%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 210 40% 96%;\n\n  --secondary-foreground: 220 15% 25%;\n\n  --muted: 210 40% 96%;\n\n  --muted-foreground: 0 0% 45%;\n\n  --accent: 210 100% 50%;\n\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 75% 45%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 13% 91%;\n  --ring: 210 100% 50%;\n  --chart-1: 210 100% 50%;\n  --chart-2: 140 75% 45%;\n  --chart-3: 35 85% 55%;\n  --chart-4: 210 80% 50%;\n  --chart-5: 270 70% 50%;\n\n  --font-sans: \"Inter\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.1);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.05), 0px 1px 3px 0px hsl(0 0% 0% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -2px hsl(0 0% 0% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 10px 10px -5px hsl(0 0% 0% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.light {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  --opaque-button-border-intensity: -8;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 0 0% 10%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 95%;\n\n  --card-foreground: 0 0% 15%;\n\n  --card-border: 0 0% 90%;\n\n  --sidebar: 0 0% 92%;\n\n  --sidebar-foreground: 0 0% 20%;\n\n  --sidebar-border: 0 0% 87%;\n\n  --sidebar-primary: 210 100% 50%;\n\n  --sidebar-primary-foreground: 210 100% 95%;\n\n  --sidebar-accent: 210 40% 92%;\n\n  --sidebar-accent-foreground: 210 40% 20%;\n\n  --sidebar-ring: 210 100% 50%;\n\n  --popover: 0 0% 93%;\n\n  --popover-foreground: 0 0% 15%;\n\n  --popover-border: 0 0% 88%;\n\n  --primary: 210 100% 50%;\n\n  --primary-foreground: 210 100% 95%;\n\n  --secondary: 0 0% 85%;\n\n  --secondary-foreground: 0 0% 25%;\n\n  --muted: 0 0% 90%;\n\n  --muted-foreground: 0 0% 45%;\n\n  --accent: 210 100% 50%;\n\n  --accent-foreground: 210 100% 95%;\n\n  --destructive: 0 75% 45%;\n\n  --destructive-foreground: 0 75% 95%;\n\n  --input: 0 0% 75%;\n  --ring: 210 100% 50%;\n  --chart-1: 210 100% 50%;\n  --chart-2: 140 75% 45%;\n  --chart-3: 35 85% 55%;\n  --chart-4: 210 80% 50%;\n  --chart-5: 270 70% 50%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.1);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.05), 0px 1px 3px 0px hsl(0 0% 0% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -2px hsl(0 0% 0% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 10px 10px -5px hsl(0 0% 0% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9828},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CategoryList.tsx":{"content":"import { ChefHat, Coffee, Cake } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport type { Category } from \"@shared/schema\";\n\ninterface CategoryListProps {\n  categories: Category[];\n  selectedCategoryId?: string;\n  onCategorySelect: (categoryId: string) => void;\n}\n\nconst iconMap = {\n  ChefHat: ChefHat,\n  Coffee: Coffee,\n  Cake: Cake,\n};\n\nexport default function CategoryList({\n  categories,\n  selectedCategoryId,\n  onCategorySelect,\n}: CategoryListProps) {\n  return (\n    <div className=\"flex flex-col gap-4 p-6\">\n      <h2 className=\"text-xl font-bold text-foreground mb-4 drop-shadow-sm\">📋 Categorías</h2>\n      {categories.map((category) => {\n        const IconComponent = iconMap[category.icon as keyof typeof iconMap] || ChefHat;\n        const isSelected = selectedCategoryId === category.id;\n\n        return (\n          <Button\n            key={category.id}\n            variant={isSelected ? \"default\" : \"ghost\"}\n            className={`justify-start h-14 gap-4 rounded-2xl transition-all duration-300 border ${\n              isSelected \n                ? \"bg-gradient-to-r from-primary via-blue-600 to-blue-700 text-white shadow-xl scale-105 border-primary/20\" \n                : \"hover:bg-gradient-to-r hover:from-blue-50/50 hover:to-purple-50/30 hover:scale-102 border-border/20 bg-white/60 backdrop-blur-sm\"\n            }`}\n            onClick={() => onCategorySelect(category.id)}\n            data-testid={`button-category-${category.id}`}\n          >\n            <IconComponent className={`w-6 h-6 ${isSelected ? \"text-white\" : \"text-primary\"}`} />\n            <span className={`font-semibold text-base ${isSelected ? \"text-white\" : \"text-foreground\"}`}>\n              {category.name}\n            </span>\n          </Button>\n        );\n      })}\n    </div>\n  );\n}","size_bytes":1807},"client/src/components/OrderSummary.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Plus, Minus, Trash2 } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { OrderItemWithProduct } from \"@shared/schema\";\nimport { formatColombianPrice } from \"@/lib/utils\";\n\ninterface OrderSummaryProps {\n  orderItems: OrderItemWithProduct[];\n  onUpdateQuantity: (itemId: string, quantity: number) => void;\n  onRemoveItem: (itemId: string) => void;\n  onSendToKitchen: () => void;\n}\n\nexport default function OrderSummary({\n  orderItems,\n  onUpdateQuantity,\n  onRemoveItem,\n  onSendToKitchen,\n}: OrderSummaryProps) {\n  const [includeTip, setIncludeTip] = useState(false);\n  \n  const subtotal = orderItems.reduce((sum, item) => sum + item.subtotal, 0);\n  const iva = subtotal * 0.08; // 8% Impoconsumo Colombia\n  const tip = subtotal * 0.10; // 10% propina voluntaria\n  const total = subtotal + iva + (includeTip ? tip : 0);\n\n  return (\n    <div className=\"flex flex-col h-full p-6\">\n      <Card className=\"flex-1 flex flex-col rounded-2xl shadow-xl border border-border/20 bg-gradient-to-br from-white/90 to-green-50/30 backdrop-blur-sm\">\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"text-xl font-bold text-foreground drop-shadow-sm\">🛒 Resumen del Pedido</CardTitle>\n        </CardHeader>\n        \n        <CardContent className=\"flex-1 flex flex-col gap-5\">\n          {orderItems.length === 0 ? (\n            <div className=\"flex-1 flex items-center justify-center text-muted-foreground\">\n              <p className=\"text-center text-lg\">\n                El pedido está vacío.<br />\n                <span className=\"text-sm\">Selecciona productos para empezar.</span>\n              </p>\n            </div>\n          ) : (\n            <>\n              <div className=\"flex-1 space-y-4 max-h-96 overflow-y-auto pr-2\">\n                {orderItems.map((item) => (\n                  <div\n                    key={item.id}\n                    className=\"flex items-center gap-4 p-4 bg-muted/30 rounded-xl border border-muted-foreground/10 hover-elevate\"\n                    data-testid={`order-item-${item.id}`}\n                  >\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-base line-clamp-1\">\n                        {item.product.name}\n                      </h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {formatColombianPrice(item.product.price)} c/u\n                      </p>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-3\">\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"h-9 w-9 rounded-lg hover:bg-destructive/10 hover:text-destructive transition-colors\"\n                        onClick={() => {\n                          if (item.quantity > 1) {\n                            onUpdateQuantity(item.id, item.quantity - 1);\n                          } else {\n                            onRemoveItem(item.id);\n                          }\n                        }}\n                        data-testid={`button-decrease-${item.id}`}\n                      >\n                        {item.quantity > 1 ? <Minus className=\"h-4 w-4\" /> : <Trash2 className=\"h-4 w-4\" />}\n                      </Button>\n                      \n                      <span className=\"w-10 text-center font-bold text-base bg-accent/10 text-accent rounded-lg py-1\">\n                        {item.quantity}\n                      </span>\n                      \n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"h-9 w-9 rounded-lg hover:bg-accent/10 hover:text-accent transition-colors\"\n                        onClick={() => onUpdateQuantity(item.id, item.quantity + 1)}\n                        data-testid={`button-increase-${item.id}`}\n                      >\n                        <Plus className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                    \n                    <div className=\"text-right min-w-[70px]\">\n                      <span className=\"font-bold text-base text-accent\">\n                        {formatColombianPrice(item.subtotal)}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"border-t border-muted-foreground/20 pt-5 space-y-3\">\n                <div className=\"flex justify-between text-base\">\n                  <span className=\"font-medium\">Subtotal:</span>\n                  <span className=\"font-semibold\" data-testid=\"text-subtotal\">{formatColombianPrice(subtotal)}</span>\n                </div>\n                <div className=\"flex justify-between text-base\">\n                  <span className=\"font-medium\">Impoconsumo (8%):</span>\n                  <span className=\"font-semibold\" data-testid=\"text-iva\">{formatColombianPrice(iva)}</span>\n                </div>\n                \n                {/* Sección de Propina Voluntaria */}\n                <div className=\"flex justify-between items-center text-base py-2 px-3 bg-muted/20 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <Switch\n                      checked={includeTip}\n                      onCheckedChange={setIncludeTip}\n                      data-testid=\"switch-tip\"\n                    />\n                    <span className=\"font-medium\">Propina Voluntaria (10%):</span>\n                  </div>\n                  <span className=\"font-semibold text-green-600\" data-testid=\"text-tip\">\n                    {formatColombianPrice(tip)}\n                  </span>\n                </div>\n                \n                <div className=\"flex justify-between text-xl font-bold border-t border-muted-foreground/20 pt-3\">\n                  <span>Total:</span>\n                  <span className=\"text-accent\" data-testid=\"text-total\">{formatColombianPrice(total)}</span>\n                </div>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n      \n      <Button\n        className=\"w-full h-16 text-xl font-bold mt-6 rounded-2xl bg-gradient-to-r from-green-500 via-emerald-600 to-green-700 hover:from-green-600 hover:to-emerald-700 text-white shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none disabled:bg-muted\"\n        disabled={orderItems.length === 0}\n        onClick={onSendToKitchen}\n        data-testid=\"button-send-to-kitchen\"\n      >\n        🍽️ Enviar a Cocina\n      </Button>\n    </div>\n  );\n}","size_bytes":6898},"client/src/components/ProductGrid.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport type { Product } from \"@shared/schema\";\nimport { formatColombianPrice } from \"@/lib/utils\";\n\ninterface ProductGridProps {\n  products: Product[];\n  onProductSelect: (product: Product) => void;\n}\n\nexport default function ProductGrid({ products, onProductSelect }: ProductGridProps) {\n  if (products.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center h-64 text-muted-foreground\">\n        <p>Selecciona una categoría para ver los productos</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-2 lg:grid-cols-3 gap-6 p-6\">\n      {products.map((product) => (\n        <Card\n          key={product.id}\n          className=\"hover-elevate cursor-pointer transition-all duration-300 h-36 rounded-2xl shadow-lg hover:shadow-2xl border border-border/20 bg-gradient-to-br from-white/90 to-blue-50/30 backdrop-blur-sm hover:scale-105\"\n          onClick={() => onProductSelect(product)}\n          data-testid={`card-product-${product.id}`}\n        >\n          <CardContent className=\"p-6 flex flex-col h-full\">\n            <div className=\"flex-1 flex flex-col justify-center\">\n              <h3 className=\"font-bold text-card-foreground mb-4 text-lg leading-tight text-center line-clamp-2\">\n                {product.name}\n              </h3>\n            </div>\n            <div className=\"mt-auto\">\n              <div className=\"w-full bg-gradient-to-r from-primary via-blue-600 to-blue-700 text-white rounded-xl py-3 px-4 font-bold text-lg text-center shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-102\">\n                {formatColombianPrice(product.price)}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}","size_bytes":1851},"client/src/components/SimpleToast.tsx":{"content":"import React, { useState, useEffect } from 'react';\n\ninterface ToastData {\n  id: string;\n  title: string;\n  message: string;\n  type: 'success' | 'error';\n  duration?: number;\n}\n\ninterface ToastContextType {\n  showToast: (toast: Omit<ToastData, 'id'>) => void;\n}\n\nconst ToastContext = React.createContext<ToastContextType | null>(null);\n\nexport const useSimpleToast = () => {\n  const context = React.useContext(ToastContext);\n  if (!context) {\n    throw new Error('useSimpleToast must be used within ToastProvider');\n  }\n  return context;\n};\n\nexport const SimpleToastProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [toasts, setToasts] = useState<ToastData[]>([]);\n\n  const showToast = (toast: Omit<ToastData, 'id'>) => {\n    const id = Date.now().toString();\n    const newToast: ToastData = {\n      id,\n      ...toast,\n      duration: toast.duration || 5000,\n    };\n    \n    console.log('SimpleToast: Adding toast:', newToast);\n    setToasts(prev => [...prev, newToast]);\n\n    setTimeout(() => {\n      console.log('SimpleToast: Removing toast:', id);\n      setToasts(prev => prev.filter(t => t.id !== id));\n    }, newToast.duration);\n  };\n\n  const removeToast = (id: string) => {\n    console.log('SimpleToast: Manually removing toast:', id);\n    setToasts(prev => prev.filter(t => t.id !== id));\n  };\n\n  return (\n    <ToastContext.Provider value={{ showToast }}>\n      {children}\n      \n      {/* Toast Container */}\n      <div \n        className=\"fixed top-4 right-4 z-[10000] flex flex-col gap-2 pointer-events-none\"\n        style={{ \n          position: 'fixed',\n          top: '16px',\n          right: '16px',\n          zIndex: 10000,\n          pointerEvents: 'none'\n        }}\n      >\n        {toasts.map((toast) => (\n          <div\n            key={toast.id}\n            className={`pointer-events-auto p-4 rounded-lg shadow-lg max-w-sm animate-in slide-in-from-right duration-300 ${\n              toast.type === 'success' \n                ? 'bg-green-500 text-white' \n                : 'bg-red-500 text-white'\n            }`}\n            style={{\n              backgroundColor: toast.type === 'success' ? '#22c55e' : '#ef4444',\n              color: 'white',\n              padding: '16px',\n              borderRadius: '8px',\n              boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)',\n              maxWidth: '384px',\n              pointerEvents: 'auto'\n            }}\n            onClick={() => removeToast(toast.id)}\n          >\n            <div className=\"font-semibold text-sm mb-1\">{toast.title}</div>\n            <div className=\"text-sm opacity-90\">{toast.message}</div>\n            <div className=\"text-xs opacity-75 mt-2\">Click to dismiss</div>\n          </div>\n        ))}\n      </div>\n    </ToastContext.Provider>\n  );\n};","size_bytes":2772},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/mockData.ts":{"content":"import type { Category, Product } from \"@shared/schema\";\n\n// Mock categories data in Spanish - used only for examples\nexport const mockCategories: Category[] = [\n  {\n    id: \"1\",\n    name: \"Platos Principales\",\n    icon: \"ChefHat\",\n  },\n  {\n    id: \"2\",\n    name: \"Bebidas\",\n    icon: \"Coffee\",\n  },\n  {\n    id: \"3\",\n    name: \"Postres\",\n    icon: \"Cake\",\n  },\n];\n\n// Mock products data in Spanish - used only for examples\nexport const mockProducts: Product[] = [\n  // Platos Principales\n  {\n    id: \"1\",\n    name: \"Solomillo a la Pimienta\",\n    description: \"Tierno solomillo de ternera con salsa de pimienta verde\",\n    price: \"28.50\",\n    categoryId: \"1\",\n  },\n  {\n    id: \"2\",\n    name: \"Pescado del Día\",\n    description: \"Pescado fresco a la plancha con verduras de temporada\",\n    price: \"24.00\",\n    categoryId: \"1\",\n  },\n  {\n    id: \"3\",\n    name: \"Paella Valenciana\",\n    description: \"Paella tradicional con pollo, conejo y judías verdes\",\n    price: \"32.00\",\n    categoryId: \"1\",\n  },\n  // Bebidas\n  {\n    id: \"4\",\n    name: \"Agua Mineral\",\n    description: \"Agua mineral natural sin gas, botella 500ml\",\n    price: \"2.50\",\n    categoryId: \"2\",\n  },\n  {\n    id: \"5\",\n    name: \"Refresco de Cola\",\n    description: \"Refresco de cola frío, lata 330ml\",\n    price: \"3.50\",\n    categoryId: \"2\",\n  },\n  {\n    id: \"6\",\n    name: \"Vino Tinto\",\n    description: \"Vino tinto de la casa, copa 150ml\",\n    price: \"4.50\",\n    categoryId: \"2\",\n  },\n  // Postres\n  {\n    id: \"7\",\n    name: \"Flan de la Casa\",\n    description: \"Flan casero con caramelo líquido y nata montada\",\n    price: \"6.50\",\n    categoryId: \"3\",\n  },\n  {\n    id: \"8\",\n    name: \"Tarta de Queso\",\n    description: \"Tarta de queso cremosa con mermelada de frutos rojos\",\n    price: \"7.50\",\n    categoryId: \"3\",\n  },\n  {\n    id: \"9\",\n    name: \"Fruta de Temporada\",\n    description: \"Selección de frutas frescas de temporada\",\n    price: \"5.50\",\n    categoryId: \"3\",\n  },\n];","size_bytes":1945},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Formatea un precio en pesos colombianos (COP)\n * Convierte de euros a pesos con una tasa aproximada y aplica formato colombiano\n * @param price - Precio en euros como string o number\n * @returns String formateado como \"$ 18.500\" (sin decimales)\n */\nexport function formatColombianPrice(price: string | number): string {\n  const euroPrice = typeof price === 'string' ? parseFloat(price) : price;\n  \n  // Conversión aproximada de euros a pesos colombianos (1 EUR = ~4700 COP)\n  const copPrice = Math.round(euroPrice * 4700);\n  \n  // Formatear con punto como separador de miles\n  const formattedPrice = copPrice.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n  \n  return `$ ${formattedPrice}`;\n}\n","size_bytes":871},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pos-system.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation, useParams } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSimpleToast } from \"@/components/SimpleToast\";\nimport CategoryList from \"@/components/CategoryList\";\nimport ProductGrid from \"@/components/ProductGrid\";\nimport OrderSummary from \"@/components/OrderSummary\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\nimport type { Category, Product, OrderItemWithProduct } from \"@shared/schema\";\n\nexport default function POSSystem() {\n  const [selectedCategoryId, setSelectedCategoryId] = useState<string>(\"\");\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const { auth, clearTable } = useAuth();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { showToast } = useSimpleToast();\n  \n  const tableId = params.tableId ? parseInt(params.tableId) : null;\n  \n  // Check if we're loading an existing order\n  const urlParams = new URLSearchParams(window.location.search);\n  const isExistingOrder = urlParams.get('existing') === 'true';\n  \n  // Redirect if no table selected or not authenticated\n  useEffect(() => {\n    if (!auth.isAuthenticated || !tableId) {\n      setLocation('/login');\n      return;\n    }\n  }, [auth.isAuthenticated, tableId, setLocation]);\n\n\n  // Fetch categories\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  // Fetch products by category\n  const { data: filteredProducts = [] } = useQuery<Product[]>({\n    queryKey: ['/api/products', selectedCategoryId],\n    queryFn: async () => {\n      const response = await fetch(`/api/products?categoryId=${selectedCategoryId}`);\n      if (!response.ok) throw new Error('Failed to fetch products');\n      return response.json();\n    },\n    enabled: !!selectedCategoryId,\n  });\n\n  // Fetch existing order from n8n if this is an occupied table\n  const { data: existingOrderData, isLoading: existingOrderLoading } = useQuery({\n    queryKey: ['/api/pedido/mesa', tableId],\n    queryFn: async () => {\n      console.log(`Fetching existing order from n8n for mesa ${tableId}`);\n      const response = await fetch(`/api/pedido/mesa/${tableId}`);\n      if (!response.ok) throw new Error('Failed to fetch existing order');\n      const data = await response.json();\n      console.log('Existing order data from n8n:', data);\n      return data;\n    },\n    enabled: !!tableId && isExistingOrder, // Solo ejecutar cuando venga de mesa ocupada\n  });\n\n  // Fetch current order items - mesa-scoped usando el mesa_id del contexto\n  const mesaId = auth.mesa_id || tableId; // Usar mesa_id del contexto o tableId como fallback\n  const { data: orderItems = [] } = useQuery<OrderItemWithProduct[]>({\n    queryKey: ['/api/order-items', mesaId],\n    queryFn: async () => {\n      console.log('Fetching order items for mesa_id:', mesaId);\n      const response = await fetch(`/api/order-items?mesa_id=${mesaId}`);\n      if (!response.ok) throw new Error('Failed to fetch order items');\n      return response.json();\n    },\n    enabled: !!mesaId, // Solo ejecutar cuando tengamos un mesa_id válido\n  });\n\n  // Add item to order mutation with conditional table invalidation\n  const addItemMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      console.log('Adding item to mesa_id:', mesaId);\n      const response = await fetch('/api/order-items', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ productId, quantity: 1, mesaId })\n      });\n      if (!response.ok) throw new Error('Failed to add item');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Always invalidate order items\n      queryClient.invalidateQueries({ queryKey: ['/api/order-items', mesaId] });\n      \n      // CRITICAL: If server marked table as occupied on first item, update cashier immediately\n      if (data.tableStatusChanged) {\n        queryClient.invalidateQueries({ queryKey: ['/api/tables'] });\n        console.log(`FIRST ITEM: Table ${mesaId} marked as occupied - cashier cache invalidated`);\n      }\n    },\n  });\n\n  // Update quantity mutation\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ itemId, quantity }: { itemId: string; quantity: number }) => {\n      console.log('Updating quantity for mesa_id:', mesaId);\n      const response = await fetch(`/api/order-items/${itemId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ quantity, mesa_id: mesaId })\n      });\n      if (!response.ok) throw new Error('Failed to update quantity');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/order-items', mesaId] });\n    },\n  });\n\n  // Remove item mutation\n  const removeItemMutation = useMutation({\n    mutationFn: async (itemId: string) => {\n      console.log('Removing item from mesa_id:', mesaId);\n      const response = await fetch(`/api/order-items/${itemId}?mesa_id=${mesaId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Failed to remove item');\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/order-items', mesaId] });\n    },\n  });\n\n  // Send to kitchen mutation\n  const sendToKitchenMutation = useMutation({\n    mutationFn: async () => {\n      // Usar los valores reales del contexto de autenticación\n      const finalMesaId = mesaId;\n      const finalMeseroId = auth.mesero_id || 1; // Fallback a 1 si no está definido\n      \n      console.log('Sending to kitchen with data:', {\n        mesa_id: finalMesaId,\n        mesero_id: finalMeseroId,\n        numberOfPeople: auth.numberOfPeople || null\n      });\n      \n      const response = await fetch('/api/orders/send-to-kitchen', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          mesa_id: finalMesaId,\n          mesero_id: finalMeseroId,\n          numberOfPeople: auth.numberOfPeople || null\n        })\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        // If n8n returns an error, throw it to be handled in onError\n        throw new Error(data.error || 'Failed to send to kitchen');\n      }\n      \n      return data;\n    },\n    onSuccess: () => {\n      console.log('Order sent successfully, clearing items for mesa_id:', mesaId);\n      // Invalidate order items for this table\n      queryClient.invalidateQueries({ queryKey: ['/api/order-items', mesaId] });\n      // CRITICAL: Invalidate tables to update status from \"available\" to \"occupied\" in cashier screen\n      queryClient.invalidateQueries({ queryKey: ['/api/tables'] });\n      console.log('Cache invalidated for order items and tables - cashier screen should update automatically');\n    },\n  });\n\n  // Populate existing order items when loading from n8n\n  useEffect(() => {\n    if (isExistingOrder && existingOrderData && !existingOrderLoading && mesaId) {\n      console.log('Populating existing order from n8n:', existingOrderData);\n      \n      const populateExistingOrder = async () => {\n        // Check if the response has the expected structure\n        if (existingOrderData.items && Array.isArray(existingOrderData.items)) {\n          console.log('Found existing order items to populate:', existingOrderData.items.length);\n          \n          // First, get current order items to check for duplicates\n          const existingItems = orderItems || [];\n          const existingProductIds = new Set(existingItems.map(item => item.productId));\n          \n          const itemsToAdd = existingOrderData.items.filter((item: any) => {\n            const productId = item.productId || item.product_id;\n            return productId && !existingProductIds.has(productId);\n          });\n          \n          if (itemsToAdd.length === 0) {\n            console.log('All items from n8n already exist in local order, skipping population');\n            return;\n          }\n          \n          console.log(`Adding ${itemsToAdd.length} new items from n8n (${existingOrderData.items.length - itemsToAdd.length} duplicates avoided)`);\n          \n          // Process items sequentially to avoid race conditions\n          const results = [];\n          for (const item of itemsToAdd) {\n            try {\n              const productId = item.productId || item.product_id;\n              const quantity = item.quantity || 1;\n              \n              console.log(`Adding existing item: productId=${productId}, quantity=${quantity}`);\n              \n              const response = await fetch('/api/order-items', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                  productId: productId,\n                  quantity: quantity,\n                  mesaId: mesaId\n                })\n              });\n              \n              if (response.ok) {\n                const addedItem = await response.json();\n                results.push({ success: true, item: addedItem });\n                console.log('Successfully added existing item:', addedItem);\n              } else {\n                const errorData = await response.json();\n                results.push({ success: false, error: errorData, item });\n                console.error('Failed to add existing item:', item, errorData);\n              }\n            } catch (error) {\n              results.push({ success: false, error, item });\n              console.error('Error adding existing item:', error, item);\n            }\n          }\n          \n          // Log summary\n          const successful = results.filter(r => r.success).length;\n          const failed = results.filter(r => !r.success).length;\n          console.log(`Population completed: ${successful} successful, ${failed} failed`);\n          \n          // Refresh the order items after all operations complete\n          if (successful > 0) {\n            queryClient.invalidateQueries({ queryKey: ['/api/order-items', mesaId] });\n          }\n        }\n      };\n      \n      populateExistingOrder().catch(error => {\n        console.error('Error in populateExistingOrder:', error);\n      });\n    }\n  }, [isExistingOrder, existingOrderData, existingOrderLoading, mesaId, queryClient, orderItems]);\n\n  // Set initial category selection\n  useEffect(() => {\n    if (categories.length > 0 && !selectedCategoryId) {\n      setSelectedCategoryId(categories[0].id);\n    }\n  }, [categories, selectedCategoryId]);\n\n  const handleCategorySelect = (categoryId: string) => {\n    console.log(`Category selected: ${categoryId}`);\n    setSelectedCategoryId(categoryId);\n  };\n\n  const handleProductSelect = (product: Product) => {\n    console.log(`Product added: ${product.name}`);\n    \n    // Check if product already exists in order\n    const existingItem = orderItems.find(item => item.productId === product.id);\n    \n    if (existingItem) {\n      // Update quantity if product exists\n      updateQuantityMutation.mutate({ \n        itemId: existingItem.id, \n        quantity: existingItem.quantity + 1 \n      });\n    } else {\n      // Add new item to order\n      addItemMutation.mutate(product.id);\n    }\n  };\n\n  const handleUpdateQuantity = (itemId: string, quantity: number) => {\n    console.log(`Quantity updated for item ${itemId}: ${quantity}`);\n    updateQuantityMutation.mutate({ itemId, quantity });\n  };\n\n  const handleRemoveItem = (itemId: string) => {\n    console.log(`Item removed: ${itemId}`);\n    removeItemMutation.mutate(itemId);\n  };\n\n  const handleSendToKitchen = () => {\n    console.log(\"Order sent to kitchen:\", orderItems);\n    sendToKitchenMutation.mutate(undefined, {\n      onSuccess: (data) => {\n        console.log(\"Send to kitchen success:\", data);\n        // Show success notification (green)\n        if (data.success) {\n          console.log(\"Showing success toast:\", data.message);\n          showToast({\n            title: \"Éxito\",\n            message: data.message || \"¡Pedido enviado a cocina!\",\n            type: \"success\",\n            duration: 5000,\n          });\n          // Also try shadcn toast as fallback\n          toast({\n            title: \"Éxito\",\n            description: data.message || \"¡Pedido enviado a cocina!\",\n            variant: \"default\",\n            duration: 5000,\n          });\n        } else {\n          console.log(\"Showing error toast (from success):\", data.error);\n          showToast({\n            title: \"Error\",\n            message: data.error || \"Error al enviar el pedido\",\n            type: \"error\",\n            duration: 5000,\n          });\n          toast({\n            title: \"Error\",\n            description: data.error || \"Error al enviar el pedido\",\n            variant: \"destructive\",\n            duration: 5000,\n          });\n        }\n      },\n      onError: (error: any) => {\n        console.error(\"Error sending to kitchen:\", error);\n        // Show error notification (red) \n        let errorMessage = \"Error al enviar el pedido. Intenta de nuevo.\";\n        \n        if (error?.message) {\n          errorMessage = error.message;\n        } else if (typeof error === 'string') {\n          errorMessage = error;\n        }\n        \n        console.log(\"Showing error toast (from onError):\", errorMessage);\n        showToast({\n          title: \"Error\",\n          message: errorMessage,\n          type: \"error\",\n          duration: 8000,\n        });\n        // Also try shadcn toast as fallback\n        toast({\n          title: \"Error\",\n          description: errorMessage,\n          variant: \"destructive\",\n          duration: 8000,\n        });\n      },\n    });\n  };\n\n  return (\n    <div className=\"h-screen flex bg-gradient-to-br from-background via-blue-50/30 to-purple-50/20 overflow-hidden\">\n      {/* Left Column - Categories */}\n      <div className=\"w-72 bg-gradient-to-b from-white/95 to-blue-50/50 border-r border-border/30 flex-shrink-0 shadow-xl backdrop-blur-sm\">\n        {/* Header with back button */}\n        <div className=\"p-4 border-b border-border/30 bg-gradient-to-r from-white/90 to-blue-50/30\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => {\n              clearTable();\n              setLocation('/tables');\n            }}\n            className=\"mb-2 hover-elevate active-elevate-2\"\n            data-testid=\"button-back-tables\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Volver a Mesas\n          </Button>\n          <div className=\"text-sm text-muted-foreground\">\n            <p>Mesa: {tableId}</p>\n            <p>Mesero: {auth.mesero_id}</p>\n            {auth.numberOfPeople && <p>Personas: {auth.numberOfPeople}</p>}\n          </div>\n        </div>\n        <CategoryList\n          categories={categories}\n          selectedCategoryId={selectedCategoryId}\n          onCategorySelect={handleCategorySelect}\n        />\n      </div>\n\n      {/* Center Column - Products */}\n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-6 border-b border-border/30 bg-gradient-to-r from-white/80 via-blue-50/30 to-purple-50/20 backdrop-blur-sm\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2 drop-shadow-sm\">\n            🍽️ Mesa {tableId} - Pedido\n          </h1>\n          <p className=\"text-muted-foreground text-lg\">\n            {selectedCategoryId ? \n              `${categories.find(c => c.id === selectedCategoryId)?.name || 'Categoría'} • ${filteredProducts.length} productos disponibles` :\n              'Selecciona una categoría para comenzar'\n            }\n          </p>\n        </div>\n        <ProductGrid\n          products={filteredProducts}\n          onProductSelect={handleProductSelect}\n        />\n      </div>\n\n      {/* Right Column - Order Summary */}\n      <div className=\"w-96 bg-gradient-to-b from-white/95 to-green-50/50 border-l border-border/30 flex-shrink-0 shadow-xl backdrop-blur-sm\">\n        <OrderSummary\n          orderItems={orderItems}\n          onUpdateQuantity={handleUpdateQuantity}\n          onRemoveItem={handleRemoveItem}\n          onSendToKitchen={handleSendToKitchen}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":16482},"client/src/components/examples/CategoryList.tsx":{"content":"import CategoryList from '../CategoryList';\nimport { mockCategories } from '@/lib/mockData';\n\nexport default function CategoryListExample() {\n  return (\n    <div className=\"w-64 bg-card border border-card-border rounded-md\">\n      <CategoryList\n        categories={mockCategories}\n        selectedCategoryId=\"1\"\n        onCategorySelect={(id) => console.log('Category selected:', id)}\n      />\n    </div>\n  );\n}","size_bytes":411},"client/src/components/examples/OrderSummary.tsx":{"content":"import OrderSummary from '../OrderSummary';\nimport { mockProducts } from '@/lib/mockData';\nimport type { OrderItemWithProduct } from '@shared/schema';\n\nexport default function OrderSummaryExample() {\n  // Sample order items\n  const sampleOrderItems: OrderItemWithProduct[] = [\n    {\n      id: '1',\n      productId: '1',\n      quantity: 2,\n      orderId: null,\n      product: mockProducts[0], // Solomillo a la Pimienta\n      subtotal: parseFloat(mockProducts[0].price) * 2,\n    },\n    {\n      id: '2',\n      productId: '4',\n      quantity: 1,\n      orderId: null,\n      product: mockProducts[3], // Agua Mineral\n      subtotal: parseFloat(mockProducts[3].price) * 1,\n    },\n  ];\n\n  return (\n    <div className=\"w-80 h-96 bg-card border border-card-border rounded-md\">\n      <OrderSummary\n        orderItems={sampleOrderItems}\n        onUpdateQuantity={(id, quantity) => console.log(`Update quantity for ${id}:`, quantity)}\n        onRemoveItem={(id) => console.log('Remove item:', id)}\n        onSendToKitchen={() => console.log('Send to kitchen clicked')}\n      />\n    </div>\n  );\n}","size_bytes":1083},"client/src/components/examples/ProductGrid.tsx":{"content":"import ProductGrid from '../ProductGrid';\nimport { mockProducts } from '@/lib/mockData';\n\nexport default function ProductGridExample() {\n  // Show products from \"Platos Principales\" category\n  const platosProducts = mockProducts.filter(p => p.categoryId === '1');\n  \n  return (\n    <div className=\"max-w-4xl\">\n      <ProductGrid\n        products={platosProducts}\n        onProductSelect={(product) => console.log('Product selected:', product.name)}\n      />\n    </div>\n  );\n}","size_bytes":475},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from 'react';\n\n// Tipos para el contexto de autenticación\nexport interface AuthState {\n  isAuthenticated: boolean;\n  mesero_id: number | null;\n  mesa_id: number | null;\n  role: 'mesero' | 'admin' | 'cajero' | null;\n  numberOfPeople?: number;\n}\n\ninterface AuthContextType {\n  auth: AuthState;\n  login: (mesero_id: number, role: 'mesero' | 'admin' | 'cajero') => void;\n  selectTable: (mesa_id: number, numberOfPeople: number) => void;\n  logout: () => void;\n  clearTable: () => void;\n}\n\n// Estado inicial\nconst initialAuthState: AuthState = {\n  isAuthenticated: false,\n  mesero_id: null,\n  mesa_id: null,\n  role: null,\n  numberOfPeople: undefined,\n};\n\n// Crear el contexto\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Provider del contexto\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [auth, setAuth] = useState<AuthState>(initialAuthState);\n\n  const login = (mesero_id: number, role: 'mesero' | 'admin' | 'cajero') => {\n    setAuth({\n      isAuthenticated: true,\n      mesero_id,\n      mesa_id: null,\n      role,\n      numberOfPeople: undefined,\n    });\n  };\n\n  const selectTable = (mesa_id: number, numberOfPeople: number) => {\n    setAuth(prev => ({\n      ...prev,\n      mesa_id,\n      numberOfPeople,\n    }));\n  };\n\n  const logout = () => {\n    setAuth(initialAuthState);\n  };\n\n  const clearTable = () => {\n    setAuth(prev => ({\n      ...prev,\n      mesa_id: null,\n      numberOfPeople: undefined,\n    }));\n  };\n\n  const contextValue: AuthContextType = {\n    auth,\n    login,\n    selectTable,\n    logout,\n    clearTable,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\n// Hook personalizado para usar el contexto\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":2004},"client/src/pages/admin.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Settings, BarChart3, Users, Menu, DollarSign, UserCheck, TableIcon } from \"lucide-react\";\nimport { formatColombianPrice } from \"@/lib/utils\";\n\n// Tipos para los datos de KPIs\ninterface AdminKPIs {\n  ventas_hoy: number;\n  personal_activo: number;\n  mesas_ocupadas: number;\n  mesas_totales: number;\n}\n\nexport default function Admin() {\n  const [, setLocation] = useLocation();\n\n  // Fetch KPIs data from n8n\n  const { data: kpisData, isLoading: kpisLoading } = useQuery<AdminKPIs>({\n    queryKey: ['/api/admin/kpis'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/kpis');\n      if (!response.ok) throw new Error('Failed to fetch KPIs');\n      return response.json();\n    },\n  });\n\n  const handleBackToLogin = () => {\n    setLocation(\"/\");\n  };\n\n  const adminSections = [\n    {\n      title: \"Gestión de Menú\",\n      description: \"Administrar categorías y productos\",\n      icon: Menu,\n      route: \"/admin/menu\",\n    },\n    {\n      title: \"Reportes y Ventas\",\n      description: \"Ver estadísticas y reportes de ventas\",\n      icon: BarChart3,\n      route: \"/admin/ventas\",\n    },\n    {\n      title: \"Gestión de Personal\",\n      description: \"Administrar usuarios y permisos\",\n      icon: Users,\n      route: \"/admin/empleados\",\n    },\n    {\n      title: \"Configuración\",\n      description: \"Configurar sistema y integraciones\",\n      icon: Settings,\n      route: \"/admin/configuracion\",\n    },\n  ];\n\n  // KPIs data with loading states\n  const kpiCards = [\n    {\n      title: \"Ventas Hoy\",\n      value: kpisLoading ? \"Cargando...\" : formatColombianPrice(kpisData?.ventas_hoy || 0),\n      icon: DollarSign,\n      color: \"text-green-600\",\n      bgColor: \"bg-green-50\",\n    },\n    {\n      title: \"Personal Activo\",\n      value: kpisLoading ? \"Cargando...\" : `${kpisData?.personal_activo || 0} meseros`,\n      icon: UserCheck,\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-50\",\n    },\n    {\n      title: \"Mesas Ocupadas\",\n      value: kpisLoading ? \"Cargando...\" : `${kpisData?.mesas_ocupadas || 0}/${kpisData?.mesas_totales || 0}`,\n      icon: TableIcon,\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-50\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"outline\"\n              onClick={handleBackToLogin}\n              className=\"hover-elevate active-elevate-2\"\n              data-testid=\"button-back-login\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver al Login\n            </Button>\n            <h1 className=\"text-3xl font-bold text-primary\">Panel de Administración</h1>\n          </div>\n        </div>\n\n        {/* KPIs Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          {kpiCards.map((kpi, index) => (\n            <Card key={index} className=\"hover-elevate\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">{kpi.title}</p>\n                    <p className=\"text-2xl font-bold mt-2\" data-testid={`kpi-${index}`}>{kpi.value}</p>\n                  </div>\n                  <div className={`p-3 rounded-lg ${kpi.bgColor}`}>\n                    <kpi.icon className={`w-6 h-6 ${kpi.color}`} />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Welcome Card */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"text-xl\">Panel de Administración</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground\">\n              Desde aquí puedes gestionar todos los aspectos del sistema POS.\n              Selecciona una opción para comenzar.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Admin Sections */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {adminSections.map((section, index) => (\n            <Card \n              key={index}\n              className=\"hover-elevate active-elevate-2 cursor-pointer transition-all\"\n              onClick={() => setLocation(section.route)}\n              data-testid={`admin-section-${index}`}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"p-3 bg-primary/10 rounded-lg\">\n                    <section.icon className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold text-lg mb-2\">{section.title}</h3>\n                    <p className=\"text-muted-foreground text-sm\">{section.description}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"mt-8 text-center\">\n          <p className=\"text-muted-foreground mb-4\">\n            ¿Necesitas acceder rápidamente al POS?\n          </p>\n          <Button \n            size=\"lg\"\n            onClick={() => setLocation(\"/pos\")}\n            className=\"hover-elevate active-elevate-2\"\n            data-testid=\"button-quick-pos\"\n          >\n            Ir al POS\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5891},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Delete, LogIn } from \"lucide-react\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const [pin, setPin] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleNumberClick = (digit: string) => {\n    if (pin.length < 4) {\n      setPin(pin + digit);\n      setError(\"\");\n    }\n  };\n\n  const handleClear = () => {\n    setPin(\"\");\n    setError(\"\");\n  };\n\n  const handleEnter = () => {\n    if (pin.length !== 4) {\n      setError(\"El PIN debe tener 4 dígitos\");\n      return;\n    }\n\n    switch (pin) {\n      case \"1111\":\n        // Mesero ID 1 - Juan\n        login(1, \"mesero\");\n        setLocation(\"/tables\");\n        break;\n      case \"2222\":\n        // Mesero ID 2 - María\n        login(2, \"mesero\");\n        setLocation(\"/tables\");\n        break;\n      case \"3333\":\n        // Mesero ID 3 - Carlos\n        login(3, \"mesero\");\n        setLocation(\"/tables\");\n        break;\n      case \"5555\":\n        // Cajero\n        login(555, \"cajero\");\n        setLocation(\"/table-map\");\n        break;\n      case \"9999\":\n        // Admin\n        login(999, \"admin\");\n        setLocation(\"/admin\");\n        break;\n      default:\n        setError(\"PIN incorrecto\");\n        setPin(\"\");\n        break;\n    }\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent) => {\n    const key = event.key;\n    if (key >= \"0\" && key <= \"9\") {\n      handleNumberClick(key);\n    } else if (key === \"Backspace\") {\n      handleClear();\n    } else if (key === \"Enter\") {\n      handleEnter();\n    }\n  };\n\n  const renderPinDisplay = () => {\n    return (\n      <div className=\"flex justify-center gap-2 mb-8\">\n        {Array.from({ length: 4 }).map((_, index) => (\n          <div\n            key={index}\n            className=\"w-12 h-12 rounded-lg border-2 border-border bg-background flex items-center justify-center text-xl font-bold\"\n          >\n            {pin[index] ? \"●\" : \"\"}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderKeypad = () => {\n    const numbers = [\n      [\"1\", \"2\", \"3\"],\n      [\"4\", \"5\", \"6\"],\n      [\"7\", \"8\", \"9\"],\n      [\"\", \"0\", \"\"]\n    ];\n\n    return (\n      <div className=\"grid grid-cols-3 gap-4 max-w-xs mx-auto\">\n        {numbers.flat().map((num, index) => {\n          if (num === \"\") {\n            return <div key={`keypad-empty-${index}`} className=\"h-16\"></div>;\n          }\n          return (\n            <Button\n              key={`keypad-${num}-${index}`}\n              variant=\"outline\"\n              size=\"lg\"\n              className=\"h-16 text-2xl font-bold hover-elevate active-elevate-2\"\n              onClick={() => handleNumberClick(num)}\n              data-testid={`button-pin-${num}`}\n            >\n              {num}\n            </Button>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div \n      className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5 flex items-center justify-center p-4\"\n      onKeyDown={handleKeyPress}\n      tabIndex={0}\n      data-testid=\"login-screen\"\n    >\n      <Card className=\"w-full max-w-md shadow-lg\">\n        <CardHeader className=\"text-center pb-6\">\n          <CardTitle className=\"text-3xl font-bold text-primary mb-2\">\n            Sistema POS\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Introduce tu PIN de acceso\n          </p>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {/* PIN Display */}\n          {renderPinDisplay()}\n\n          {/* Error Message */}\n          {error && (\n            <div className=\"text-center\">\n              <Badge variant=\"destructive\" className=\"text-sm\" data-testid=\"error-message\">\n                {error}\n              </Badge>\n            </div>\n          )}\n\n          {/* Keypad */}\n          {renderKeypad()}\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3 mt-8\">\n            <Button\n              variant=\"outline\"\n              size=\"lg\"\n              className=\"flex-1 h-12 hover-elevate active-elevate-2\"\n              onClick={handleClear}\n              data-testid=\"button-clear\"\n            >\n              <Delete className=\"w-4 h-4 mr-2\" />\n              Borrar\n            </Button>\n            <Button\n              size=\"lg\"\n              className=\"flex-1 h-12 hover-elevate active-elevate-2\"\n              onClick={handleEnter}\n              disabled={pin.length !== 4}\n              data-testid=\"button-enter\"\n            >\n              <LogIn className=\"w-4 h-4 mr-2\" />\n              Entrar\n            </Button>\n          </div>\n\n          {/* Helper Text */}\n          <div className=\"text-center text-sm text-muted-foreground pt-4\">\n            <p>Usa el teclado físico o toca los números</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5130},"client/src/pages/table-map.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { ArrowLeft, Users, Loader2, Settings, CheckCircle, XCircle, Clock } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Table } from \"@shared/schema\";\n\nexport default function TableMap() {\n  const [, setLocation] = useLocation();\n  const { auth, selectTable, logout } = useAuth();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [selectedTable, setSelectedTable] = useState<number | null>(null);\n  const [numberOfPeople, setNumberOfPeople] = useState<string>(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [managingTable, setManagingTable] = useState<Table | null>(null);\n  const [isManageModalOpen, setIsManageModalOpen] = useState(false);\n\n  // Authentication guard - redirect if not authenticated\n  if (!auth.isAuthenticated) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  const handleBackToLogin = () => {\n    logout();\n    setLocation(\"/login\");\n  };\n\n  const handleTableClick = (tableNumber: number, status: string) => {\n    console.log(`Table ${tableNumber} clicked with status:`, status);\n    if (status === \"available\") {\n      // TANTO meseros como cajeros pueden tomar pedidos en mesas disponibles\n      // Cajeros para pedidos directos (takeaway, delivery, etc.)\n      setSelectedTable(tableNumber);\n      setNumberOfPeople(\"\");\n      setIsModalOpen(true);\n    } else if (status === \"occupied\") {\n      if (auth.role === \"cajero\") {\n        // Cajero va a gestión de pedido\n        console.log(`Cajero accessing order management for table ${tableNumber}`);\n        selectTable(tableNumber, 0);\n        setLocation(`/order-management/${tableNumber}`);\n      } else {\n        // Mesero navega al POS con pedido existente\n        console.log(`Loading existing order for occupied table ${tableNumber}`);\n        selectTable(tableNumber, 0); // Set 0 people since it's an existing order\n        setLocation(`/order/${tableNumber}?existing=true`);\n      }\n    }\n  };\n\n  const handleConfirmTable = async () => {\n    if (selectedTable && numberOfPeople && parseInt(numberOfPeople) > 0) {\n      console.log(`Confirming table ${selectedTable} with ${numberOfPeople} people`);\n      \n      // CRITICAL: Mark table as occupied immediately when waiter starts order\n      try {\n        await updateTableStatusMutation.mutateAsync({ \n          tableId: selectedTable, \n          status: \"occupied\" \n        });\n        console.log(`Table ${selectedTable} marked as occupied - cashier will see it immediately`);\n      } catch (error) {\n        console.error('Failed to mark table as occupied:', error);\n        // Continue anyway - don't block the flow\n      }\n      \n      selectTable(selectedTable, parseInt(numberOfPeople));\n      setLocation(`/order/${selectedTable}`);\n      setIsModalOpen(false);\n    }\n  };\n\n  // Mutation para cambiar estado de mesa\n  const updateTableStatusMutation = useMutation({\n    mutationFn: async ({ tableId, status }: { tableId: number; status: string }) => {\n      return await apiRequest('PUT', `/api/tables/${tableId}/status`, { status });\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tables'] });\n      toast({\n        title: \"Estado actualizado\",\n        description: `Mesa ${variables.tableId} ahora está ${getStatusText(variables.status)}.`,\n      });\n      setIsManageModalOpen(false);\n      setManagingTable(null);\n    },\n    onError: (error) => {\n      console.error('Error updating table status:', error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar el estado de la mesa. Intenta de nuevo.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleManageTable = (table: Table, event: React.MouseEvent) => {\n    event.stopPropagation();\n    setManagingTable(table);\n    setIsManageModalOpen(true);\n  };\n\n  const handleStatusChange = (newStatus: string) => {\n    if (managingTable) {\n      updateTableStatusMutation.mutate({\n        tableId: managingTable.id,\n        status: newStatus\n      });\n    }\n  };\n\n  // Fetch tables from API with auto-refresh for cashier real-time updates\n  const { data: tables = [], isLoading: tablesLoading, error: tablesError } = useQuery<Table[]>({\n    queryKey: ['/api/tables'],\n    queryFn: async () => {\n      console.log('Fetching tables from API');\n      const response = await fetch('/api/tables');\n      if (!response.ok) throw new Error('Failed to fetch tables');\n      const data = await response.json();\n      console.log('Tables fetched from API:', data);\n      return data;\n    },\n    // Auto-refresh every 10 seconds for cashier real-time updates\n    refetchInterval: 10000,\n    refetchIntervalInBackground: true,\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"available\":\n        return \"bg-green-500 hover:bg-green-600\";\n      case \"occupied\":\n        return \"bg-red-500 hover:bg-red-600\";\n      case \"reserved\":\n        return \"bg-yellow-500 hover:bg-yellow-600\";\n      default:\n        return \"bg-gray-500 hover:bg-gray-600\";\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"available\":\n        return \"Disponible\";\n      case \"occupied\":\n        return \"Ocupada\";\n      case \"reserved\":\n        return \"Reservada\";\n      default:\n        return \"Desconocido\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5 p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"outline\"\n              onClick={handleBackToLogin}\n              className=\"hover-elevate active-elevate-2\"\n              data-testid=\"button-back-login\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Cerrar Sesión\n            </Button>\n            <h1 className=\"text-3xl font-bold text-primary\">Mapa de Mesas</h1>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm text-muted-foreground\">\n              {auth.role === \"cajero\" ? \"Cajero\" : \"Mesero\"} ID: {auth.mesero_id}\n            </p>\n          </div>\n        </div>\n\n        {/* Legend */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Leyenda</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n                <span className=\"text-sm\">Disponible</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-4 h-4 bg-red-500 rounded\"></div>\n                <span className=\"text-sm\">Ocupada</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-4 h-4 bg-yellow-500 rounded\"></div>\n                <span className=\"text-sm\">Reservada</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Loading State */}\n        {tablesLoading && (\n          <Card className=\"mb-6\">\n            <CardContent className=\"flex items-center justify-center p-8\">\n              <Loader2 className=\"w-8 h-8 animate-spin text-primary mr-3\" />\n              <span className=\"text-lg text-muted-foreground\">Cargando mesas...</span>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Error State */}\n        {tablesError && (\n          <Card className=\"mb-6\">\n            <CardContent className=\"text-center p-8\">\n              <div className=\"text-red-500 mb-3\">⚠️</div>\n              <h3 className=\"text-lg font-semibold text-red-600 mb-2\">Error al cargar las mesas</h3>\n              <p className=\"text-muted-foreground\">\n                {tablesError instanceof Error ? tablesError.message : 'No se pudieron cargar las mesas del restaurante'}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Empty State */}\n        {!tablesLoading && !tablesError && tables.length === 0 && (\n          <Card className=\"mb-6\">\n            <CardContent className=\"text-center p-8\">\n              <div className=\"text-muted-foreground mb-3\">🍽️</div>\n              <h3 className=\"text-lg font-semibold mb-2\">No hay mesas disponibles</h3>\n              <p className=\"text-muted-foreground\">\n                No se encontraron mesas en el sistema.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Tables Grid - Only show when we have data and no error */}\n        {!tablesLoading && !tablesError && tables.length > 0 && (\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-4 gap-6\">\n            {tables.map((table) => (\n              <Card \n                key={table.id}\n                className={`hover-elevate active-elevate-2 transition-all relative ${\n                  table.status === \"available\" || table.status === \"occupied\" ? \"cursor-pointer\" : \"cursor-default\"\n                }`}\n                onClick={() => handleTableClick(table.number, table.status)}\n                data-testid={`table-${table.number}`}\n              >\n                {/* Management Button */}\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  className=\"absolute top-2 right-2 h-8 w-8 opacity-70 hover:opacity-100 z-10\"\n                  onClick={(e) => handleManageTable(table, e)}\n                  data-testid={`manage-table-${table.number}`}\n                >\n                  <Settings className=\"w-4 h-4\" />\n                </Button>\n\n                <CardContent className=\"p-6 text-center\">\n                  <div className={`w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center text-white font-bold text-xl ${getStatusColor(table.status)}`}>\n                    {table.number}\n                  </div>\n                  <h3 className=\"font-semibold text-lg mb-2\">Mesa {table.number}</h3>\n                  <div className=\"flex items-center justify-center gap-1 text-sm text-muted-foreground mb-2\">\n                    <Users className=\"w-4 h-4\" />\n                    <span>{table.capacity} personas</span>\n                  </div>\n                  <p className=\"text-sm font-medium\">{getStatusText(table.status)}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Quick Actions */}\n        <div className=\"mt-8 text-center\">\n          <p className=\"text-muted-foreground mb-4\">\n            {auth.role === \"cajero\" ? (\n              <>\n                Haz clic en una mesa ocupada (roja) para gestionar su pedido y procesar el pago.\n                <br />\n                Usa el botón ⚙️ para cambiar el estado de cualquier mesa (disponible, ocupada, reservada).\n              </>\n            ) : (\n              <>\n                Selecciona una mesa disponible (verde) para comenzar un nuevo pedido, o una mesa ocupada (roja) para continuar un pedido existente.\n                <br />\n                Usa el botón ⚙️ para cambiar el estado de cualquier mesa (disponible, ocupada, reservada).\n              </>\n            )}\n          </p>\n        </div>\n\n        {/* Modal para número de personas */}\n        <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n          <DialogContent className=\"sm:max-w-[425px]\" data-testid=\"people-count-modal\">\n            <DialogHeader>\n              <DialogTitle>Mesa {selectedTable}</DialogTitle>\n              <DialogDescription>\n                ¿Cuántas personas van a ocupar esta mesa?\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"people-count\" className=\"text-right\">\n                  Personas:\n                </Label>\n                <Input\n                  id=\"people-count\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"10\"\n                  value={numberOfPeople}\n                  onChange={(e) => setNumberOfPeople(e.target.value)}\n                  className=\"col-span-3\"\n                  placeholder=\"Ej: 4\"\n                  data-testid=\"input-people-count\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                className=\"flex-1 hover-elevate active-elevate-2\"\n                onClick={() => setIsModalOpen(false)}\n                data-testid=\"button-cancel-table\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                className=\"flex-1 hover-elevate active-elevate-2\"\n                onClick={handleConfirmTable}\n                disabled={!numberOfPeople || parseInt(numberOfPeople) <= 0}\n                data-testid=\"button-confirm-table\"\n              >\n                Confirmar Mesa\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Modal para gestionar estado de mesa */}\n        <Dialog open={isManageModalOpen} onOpenChange={setIsManageModalOpen}>\n          <DialogContent className=\"sm:max-w-[425px]\" data-testid=\"manage-table-modal\">\n            <DialogHeader>\n              <DialogTitle>Gestionar Mesa {managingTable?.number}</DialogTitle>\n              <DialogDescription>\n                Cambiar el estado de la mesa {managingTable?.number} ({managingTable?.capacity} personas)\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Estado actual: <span className=\"font-semibold\">{managingTable && getStatusText(managingTable.status)}</span>\n              </p>\n              \n              <div className=\"space-y-3\">\n                <Button\n                  className=\"w-full justify-start gap-3 hover-elevate active-elevate-2\"\n                  variant={managingTable?.status === \"available\" ? \"default\" : \"outline\"}\n                  onClick={() => handleStatusChange(\"available\")}\n                  disabled={updateTableStatusMutation.isPending}\n                  data-testid=\"button-set-available\"\n                >\n                  <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                  Marcar como Disponible\n                </Button>\n                \n                <Button\n                  className=\"w-full justify-start gap-3 hover-elevate active-elevate-2\"\n                  variant={managingTable?.status === \"occupied\" ? \"default\" : \"outline\"}\n                  onClick={() => handleStatusChange(\"occupied\")}\n                  disabled={updateTableStatusMutation.isPending}\n                  data-testid=\"button-set-occupied\"\n                >\n                  <XCircle className=\"w-4 h-4 text-red-500\" />\n                  Marcar como Ocupada\n                </Button>\n                \n                <Button\n                  className=\"w-full justify-start gap-3 hover-elevate active-elevate-2\"\n                  variant={managingTable?.status === \"reserved\" ? \"default\" : \"outline\"}\n                  onClick={() => handleStatusChange(\"reserved\")}\n                  disabled={updateTableStatusMutation.isPending}\n                  data-testid=\"button-set-reserved\"\n                >\n                  <Clock className=\"w-4 h-4 text-yellow-500\" />\n                  Marcar como Reservada\n                </Button>\n              </div>\n              \n              {updateTableStatusMutation.isPending && (\n                <div className=\"flex items-center justify-center py-4\">\n                  <Loader2 className=\"w-6 h-6 animate-spin text-primary mr-2\" />\n                  <span className=\"text-sm text-muted-foreground\">Actualizando estado...</span>\n                </div>\n              )}\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                className=\"flex-1 hover-elevate active-elevate-2\"\n                onClick={() => setIsManageModalOpen(false)}\n                disabled={updateTableStatusMutation.isPending}\n                data-testid=\"button-cancel-manage\"\n              >\n                Cancelar\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":17370},"server/db-storage.ts":{"content":"import { \n  type Category, \n  type Product, \n  type OrderItem, \n  type InsertCategory,\n  type InsertProduct,\n  type InsertOrderItem,\n  categories,\n  products,\n  orderItems\n} from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { neon } from '@neondatabase/serverless';\nimport type { IStorage } from \"./storage\";\n\n// Initialize database connection\nconst sql = neon(process.env.DATABASE_URL!);\nconst db = drizzle(sql);\n\nexport class DbStorage implements IStorage {\n  // Categories\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories);\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  // Products\n  async getProducts(): Promise<Product[]> {\n    return await db.select().from(products);\n  }\n\n  async getProductsByCategory(categoryId: string): Promise<Product[]> {\n    return await db.select().from(products).where(eq(products.categoryId, categoryId));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const result = await db.select().from(products).where(eq(products.id, id));\n    return result[0];\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    return newProduct;\n  }\n\n  // Order Items\n  async getOrderItems(): Promise<OrderItem[]> {\n    return await db.select().from(orderItems);\n  }\n\n  async createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem> {\n    const [newOrderItem] = await db.insert(orderItems).values(orderItem).returning();\n    return newOrderItem;\n  }\n\n  async updateOrderItemQuantity(id: string, quantity: number): Promise<OrderItem | undefined> {\n    const [updatedItem] = await db\n      .update(orderItems)\n      .set({ quantity })\n      .where(eq(orderItems.id, id))\n      .returning();\n    return updatedItem;\n  }\n\n  async deleteOrderItem(id: string): Promise<boolean> {\n    const result = await db.delete(orderItems).where(eq(orderItems.id, id));\n    return result.rowCount > 0;\n  }\n\n  async clearAllOrderItems(): Promise<void> {\n    await db.delete(orderItems);\n  }\n}","size_bytes":2266},"server/n8n-storage.ts":{"content":"import { \n  type Category, \n  type Product, \n  type OrderItem, \n  type Table,\n  type InsertCategory,\n  type InsertProduct,\n  type InsertOrderItem,\n  type InsertTable\n} from \"@shared/schema\";\nimport type { IStorage } from \"./storage\";\n\nexport class N8nStorage implements IStorage {\n  private orderItems: Map<string, OrderItem> = new Map();\n  private cachedCategories: Category[] = [];\n  private cachedProducts: Product[] = [];\n  private tables: Map<number, Table> = new Map();\n  private lastFetch = 0;\n  private cacheTimeout = 60000; // 1 minute cache\n\n  constructor() {\n    this.seedTables();\n  }\n\n  private seedTables() {\n    // Seed tables/mesas con datos de prueba - todas disponibles hasta que n8n funcione\n    const tablesData: Table[] = [\n      { id: 1, number: 1, capacity: 4, status: \"available\" },\n      { id: 2, number: 2, capacity: 2, status: \"available\" },\n      { id: 3, number: 3, capacity: 6, status: \"available\" },\n      { id: 4, number: 4, capacity: 4, status: \"available\" },\n      { id: 5, number: 5, capacity: 2, status: \"available\" },\n      { id: 6, number: 6, capacity: 8, status: \"available\" },\n      { id: 7, number: 7, capacity: 4, status: \"available\" },\n      { id: 8, number: 8, capacity: 2, status: \"available\" },\n    ];\n\n    tablesData.forEach(table => this.tables.set(table.id, table));\n    console.log(\"N8nStorage: Seeded\", tablesData.length, \"tables\");\n  }\n\n  private async fetchMenuFromN8n(): Promise<{ categories: Category[], products: Product[] }> {\n    const now = Date.now();\n    \n    // Return cached data if still fresh\n    if (now - this.lastFetch < this.cacheTimeout && this.cachedCategories.length > 0) {\n      return { categories: this.cachedCategories, products: this.cachedProducts };\n    }\n\n    const n8nMenuUrl = process.env.N8N_MENU_URL;\n    if (!n8nMenuUrl) {\n      console.log(\"N8N_MENU_URL not configured, using fallback menu data\");\n      return this.getFallbackMenuData();\n    }\n\n    try {\n      console.log(\"Fetching menu from n8n:\", n8nMenuUrl);\n      \n      const response = await fetch(n8nMenuUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        },\n        // 10 second timeout\n        signal: AbortSignal.timeout(10000)\n      });\n\n      if (!response.ok) {\n        // Try to get error details from response body\n        let errorDetails = `${response.status} ${response.statusText}`;\n        try {\n          const errorText = await response.text();\n          if (errorText) {\n            errorDetails += ` - ${errorText}`;\n          }\n        } catch {\n          // Ignore if can't read error body\n        }\n        console.error(`n8n API error: ${errorDetails}`);\n        throw new Error(`n8n API error: ${errorDetails}`);\n      }\n\n      const data = await response.json();\n      console.log(\"Received menu data from n8n:\", data);\n\n      // Parse the data - adapt this based on your n8n API format\n      let categories: Category[] = [];\n      let products: Product[] = [];\n      \n      // If your n8n returns { categories: [...], products: [...] }\n      if (data.categories && data.products) {\n        categories = data.categories;\n        products = data.products;\n      }\n      // If your n8n returns just an array of items with categories mixed in\n      else if (Array.isArray(data)) {\n        // Check if items have Spanish format (nombre, precio, categoria)\n        if (data.length > 0 && data[0].nombre && data[0].precio && data[0].categoria) {\n          // Get unique categories from the data\n          const uniqueCategories = new Set<string>();\n          data.forEach((item: any) => {\n            if (item.categoria) uniqueCategories.add(item.categoria);\n          });\n          \n          // Create categories array\n          categories = Array.from(uniqueCategories).map((categoryName, index) => ({\n            id: categoryName.toLowerCase().replace(/\\s+/g, '-'),\n            name: categoryName,\n            icon: this.getCategoryIcon(categoryName)\n          }));\n          \n          // Transform products\n          products = data.map((item: any) => ({\n            id: item.id.toString(),\n            name: item.nombre,\n            description: item.descripcion || '',\n            price: item.precio,\n            categoryId: item.categoria.toLowerCase().replace(/\\s+/g, '-')\n          }));\n        } else {\n          // Original logic for arrays with type property\n          categories = data.filter(item => item.type === 'category');\n          products = data.filter(item => item.type === 'product');\n        }\n      }\n      // If your n8n returns a single product object in Spanish format\n      else if (data.nombre && data.precio && data.categoria) {\n        // Create category from the categoria field\n        const categoryName = data.categoria;\n        const categoryId = categoryName.toLowerCase().replace(/\\s+/g, '-');\n        \n        categories = [{\n          id: categoryId,\n          name: categoryName,\n          icon: this.getCategoryIcon(categoryName)\n        }];\n        \n        // Transform Spanish product to English format\n        products = [{\n          id: data.id.toString(),\n          name: data.nombre,\n          description: data.descripcion || '',\n          price: data.precio,\n          categoryId: categoryId\n        }];\n      }\n      // If your n8n returns a different format, adapt accordingly\n      else {\n        console.warn(\"Unexpected n8n data format:\", data);\n        // Try to extract categories and products from whatever format received\n        categories = data.categories || [];\n        products = data.products || data.items || [];\n      }\n\n      // If we didn't get valid data from n8n, use fallback\n      if (categories.length === 0 || products.length === 0) {\n        console.log(\"n8n returned empty or invalid data, using fallback menu data\");\n        return this.getFallbackMenuData();\n      }\n\n      // Cache the data\n      this.cachedCategories = categories;\n      this.cachedProducts = products;\n      this.lastFetch = now;\n\n      console.log(`Cached ${categories.length} categories and ${products.length} products from n8n`);\n      \n      return { categories, products };\n      \n    } catch (error) {\n      console.error('Error fetching menu from n8n:', error);\n      \n      // Return cached data if available, even if stale\n      if (this.cachedCategories.length > 0) {\n        console.log(\"Using stale cached data due to n8n error\");\n        return { categories: this.cachedCategories, products: this.cachedProducts };\n      }\n      \n      // If no cached data and n8n fails, use fallback data\n      console.log(\"n8n unavailable, using fallback menu data\");\n      return this.getFallbackMenuData();\n    }\n  }\n\n  private getCategoryIcon(categoryName: string): string {\n    const categoryMap: Record<string, string> = {\n      'ensaladas': 'Salad',\n      'platos principales': 'ChefHat',\n      'principales': 'ChefHat',\n      'bebidas': 'Coffee',\n      'postres': 'Cake',\n      'aperitivos': 'Utensils',\n      'sopas': 'Bowl',\n      'carnes': 'Beef',\n      'pescados': 'Fish',\n      'vegetarianos': 'Leaf',\n      'mariscos': 'Fish'\n    };\n    \n    const key = categoryName.toLowerCase();\n    return categoryMap[key] || 'Utensils';\n  }\n\n\n  private getFallbackMenuData(): { categories: Category[], products: Product[] } {\n    const categories: Category[] = [\n      { id: \"1\", name: \"Platos Principales\", icon: \"ChefHat\" },\n      { id: \"2\", name: \"Bebidas\", icon: \"Coffee\" },\n      { id: \"3\", name: \"Postres\", icon: \"Cake\" },\n    ];\n\n    const products: Product[] = [\n      { id: \"1\", name: \"Paella Valenciana\", description: \"Arroz bomba tradicional con pollo y verduras\", price: \"24.50\", categoryId: \"1\" },\n      { id: \"2\", name: \"Solomillo de Ternera\", description: \"Solomillo a la plancha con salsa de pimienta\", price: \"28.90\", categoryId: \"1\" },\n      { id: \"3\", name: \"Lubina a la Sal\", description: \"Pescado fresco del Mediterráneo\", price: \"26.80\", categoryId: \"1\" },\n      { id: \"4\", name: \"Cerveza Estrella Galicia\", description: \"Cerveza rubia, botella 330ml\", price: \"3.50\", categoryId: \"2\" },\n      { id: \"5\", name: \"Vino Tinto Crianza\", description: \"D.O. Rioja, copa 150ml\", price: \"5.80\", categoryId: \"2\" },\n      { id: \"6\", name: \"Agua Mineral\", description: \"Agua con gas, botella 500ml\", price: \"2.50\", categoryId: \"2\" },\n      { id: \"7\", name: \"Tiramisú Casero\", description: \"Postre italiano tradicional\", price: \"6.50\", categoryId: \"3\" },\n      { id: \"8\", name: \"Crema Catalana\", description: \"Postre tradicional catalán\", price: \"5.80\", categoryId: \"3\" },\n    ];\n\n    return { categories, products };\n  }\n\n  // Categories\n  async getCategories(): Promise<Category[]> {\n    const { categories } = await this.fetchMenuFromN8n();\n    return categories;\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    throw new Error(\"Creating categories via n8n not implemented\");\n  }\n\n  // Products\n  async getProducts(): Promise<Product[]> {\n    const { products } = await this.fetchMenuFromN8n();\n    return products;\n  }\n\n  async getProductsByCategory(categoryId: string): Promise<Product[]> {\n    const { products } = await this.fetchMenuFromN8n();\n    return products.filter(product => product.categoryId === categoryId);\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const { products } = await this.fetchMenuFromN8n();\n    return products.find(product => product.id === id);\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    throw new Error(\"Creating products via n8n not implemented\");\n  }\n\n  // Order Items (local storage only) - Mesa-scoped\n  async getOrderItems(mesaId: number): Promise<OrderItem[]> {\n    return Array.from(this.orderItems.values()).filter(item => item.mesaId === mesaId);\n  }\n\n  async createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem> {\n    const id = Date.now().toString() + Math.random().toString(36);\n    const newOrderItem: OrderItem = { \n      ...orderItem, \n      id,\n      quantity: orderItem.quantity ?? 1,\n      orderId: orderItem.orderId ?? null,\n      mesaId: orderItem.mesaId\n    };\n    this.orderItems.set(id, newOrderItem);\n    return newOrderItem;\n  }\n\n  async updateOrderItemQuantity(id: string, quantity: number, mesaId: number): Promise<OrderItem | undefined> {\n    const orderItem = this.orderItems.get(id);\n    if (orderItem && orderItem.mesaId === mesaId) {\n      orderItem.quantity = quantity;\n      this.orderItems.set(id, orderItem);\n    }\n    return orderItem;\n  }\n\n  async deleteOrderItem(id: string, mesaId: number): Promise<boolean> {\n    const orderItem = this.orderItems.get(id);\n    if (orderItem && orderItem.mesaId === mesaId) {\n      return this.orderItems.delete(id);\n    }\n    return false;\n  }\n\n  async clearOrderItems(mesaId: number): Promise<void> {\n    const itemsToDelete = Array.from(this.orderItems.entries())\n      .filter(([, item]) => item.mesaId === mesaId)\n      .map(([id]) => id);\n    \n    itemsToDelete.forEach(id => this.orderItems.delete(id));\n  }\n\n  // Extract n8n base URL from the configured endpoint\n  private getN8nBaseUrl(): string | null {\n    const n8nUrl = process.env.N8N_ORDER_BASE_URL;\n    if (!n8nUrl) return null;\n    \n    // Extract base URL from: https://domain/webhook/id/api/pedido/mesa/:mesaId\n    const match = n8nUrl.match(/(https:\\/\\/[^\\/]+\\/webhook\\/[^\\/]+)/);\n    return match ? match[1] : null;\n  }\n\n  // Normalize table status from Spanish to English\n  private normalizeTableStatus(status: string): string {\n    const statusMap: { [key: string]: string } = {\n      'disponible': 'available',\n      'ocupada': 'occupied', \n      'reservada': 'reserved',\n      'available': 'available',\n      'occupied': 'occupied',\n      'reserved': 'reserved'\n    };\n    \n    const normalized = statusMap[status.toLowerCase()] || 'available';\n    console.log(`Normalizing status: \"${status}\" -> \"${normalized}\"`);\n    return normalized;\n  }\n\n  // Tables/Mesas (fetch from n8n with local cache)\n  async getTables(): Promise<Table[]> {\n    console.log('N8nStorage: Getting all tables from n8n');\n    \n    try {\n      const n8nBaseUrl = this.getN8nBaseUrl();\n      if (!n8nBaseUrl) {\n        console.log('N8N_ORDER_BASE_URL not configured properly, using cached tables');\n        return Array.from(this.tables.values());\n      }\n\n      // Try different possible endpoints for table status\n      const possibleEndpoints = [\n        `${n8nBaseUrl}/api/mesas/estado`,\n        `${n8nBaseUrl}/api/mesas`, \n        `${n8nBaseUrl}/mesas`,\n        `${n8nBaseUrl}/tables`\n      ];\n\n      for (const tablesStatusUrl of possibleEndpoints) {\n        console.log('Trying n8n endpoint:', tablesStatusUrl);\n        \n        try {\n          const controller = new AbortController();\n          const timeoutId = setTimeout(() => controller.abort(), 8000); // 8 second timeout\n          \n          const response = await fetch(tablesStatusUrl, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            signal: controller.signal\n          });\n          \n          clearTimeout(timeoutId);\n\n          if (response.ok) {\n            const n8nTablesData = await response.json();\n            console.log('Table statuses received from n8n:', n8nTablesData);\n            \n            // Update local cache with n8n data\n            if (Array.isArray(n8nTablesData)) {\n              n8nTablesData.forEach((n8nTable: any) => {\n                const tableId = n8nTable.id || n8nTable.mesa_id || n8nTable.number;\n                const existingTable = this.tables.get(tableId);\n                \n                if (existingTable) {\n                  // Update status from n8n and normalize Spanish→English\n                  const rawStatus = n8nTable.status || n8nTable.estado || existingTable.status;\n                  const normalizedStatus = this.normalizeTableStatus(rawStatus);\n                  const updatedTable = {\n                    ...existingTable,\n                    status: normalizedStatus\n                  };\n                  this.tables.set(tableId, updatedTable);\n                  console.log(`Updated table ${tableId} status from \"${rawStatus}\" to:`, updatedTable.status);\n                }\n              });\n            }\n            \n            // Successfully got data from this endpoint, break out of the loop\n            break;\n          } else {\n            console.warn(`Endpoint ${tablesStatusUrl} failed with status ${response.status}`);\n          }\n        } catch (endpointError) {\n          console.warn(`Failed to fetch from ${tablesStatusUrl}:`, endpointError);\n          // Continue to next endpoint\n        }\n      }\n      \n      return Array.from(this.tables.values());\n    } catch (error) {\n      console.warn('Error fetching tables from n8n, using cached data:', error);\n      return Array.from(this.tables.values());\n    }\n  }\n\n  async getTable(id: number): Promise<Table | undefined> {\n    console.log('N8nStorage: Getting table with id:', id);\n    return this.tables.get(id);\n  }\n\n  async updateTableStatus(id: number, status: string): Promise<Table | undefined> {\n    console.log(`N8nStorage: Updating table ${id} status to:`, status);\n    const table = this.tables.get(id);\n    if (table) {\n      const updatedTable = { ...table, status };\n      this.tables.set(id, updatedTable);\n      console.log('N8nStorage: Table updated successfully:', updatedTable);\n      // TODO: En el futuro, podríamos sincronizar este cambio con n8n\n      return updatedTable;\n    }\n    console.log('N8nStorage: Table not found for update:', id);\n    return undefined;\n  }\n\n  async createTable(table: InsertTable): Promise<Table> {\n    console.log('N8nStorage: Creating new table:', table);\n    const newTable: Table = { \n      ...table,\n      status: table.status || \"available\" // Ensure status is always defined\n    };\n    this.tables.set(newTable.id, newTable);\n    console.log('N8nStorage: Table created successfully:', newTable);\n    // TODO: En el futuro, podríamos sincronizar este cambio con n8n\n    return newTable;\n  }\n}","size_bytes":16104},"server/seed-data.ts":{"content":"import { DbStorage } from \"./db-storage\";\n\nexport async function seedDatabase() {\n  const dbStorage = new DbStorage();\n  \n  try {\n    // Verificar si ya hay datos\n    const existingCategories = await dbStorage.getCategories();\n    if (existingCategories.length > 0) {\n      console.log(\"Database already seeded, skipping...\");\n      return;\n    }\n\n    console.log(\"Seeding database with real restaurant data...\");\n\n    // Crear categorías\n    const categoryPlatos = await dbStorage.createCategory({\n      name: \"Platos Principales\", \n      icon: \"ChefHat\"\n    });\n    \n    const categoryBebidas = await dbStorage.createCategory({\n      name: \"Bebidas\", \n      icon: \"Coffee\"\n    });\n    \n    const categoryPostres = await dbStorage.createCategory({\n      name: \"Postres\", \n      icon: \"Cake\"\n    });\n\n    const categoryEntrantes = await dbStorage.createCategory({\n      name: \"Entrantes\", \n      icon: \"Utensils\"\n    });\n\n    console.log(\"Categories created:\", { categoryPlatos, categoryBebidas, categoryPostres, categoryEntrantes });\n\n    // Crear productos - Entrantes\n    await dbStorage.createProduct({\n      name: \"Croquetas de Jamón Ibérico\",\n      description: \"6 unidades de croquetas cremosas de jamón ibérico caseras\",\n      price: \"12.50\",\n      categoryId: categoryEntrantes.id\n    });\n\n    await dbStorage.createProduct({\n      name: \"Ensalada César\",\n      description: \"Lechuga romana, pollo a la plancha, parmesano y salsa césar\",\n      price: \"14.90\",\n      categoryId: categoryEntrantes.id\n    });\n\n    await dbStorage.createProduct({\n      name: \"Tabla de Quesos Artesanos\",\n      description: \"Selección de quesos nacionales con miel y frutos secos\",\n      price: \"18.50\",\n      categoryId: categoryEntrantes.id\n    });\n\n    // Crear productos - Platos Principales\n    await dbStorage.createProduct({\n      name: \"Solomillo de Ternera a la Pimienta\",\n      description: \"Solomillo de ternera nacional con salsa de pimienta verde y patatas confitadas\",\n      price: \"28.50\",\n      categoryId: categoryPlatos.id\n    });\n\n    await dbStorage.createProduct({\n      name: \"Paella Valenciana\",\n      description: \"Arroz bomba, pollo de corral, conejo, judías verdes y azafrán\",\n      price: \"24.00\",\n      categoryId: categoryPlatos.id\n    });\n\n    await dbStorage.createProduct({\n      name: \"Lubina a la Sal\",\n      description: \"Lubina fresca del Mediterráneo cocinada a la sal con verduras\",\n      price: \"26.80\",\n      categoryId: categoryPlatos.id\n    });\n\n    await dbStorage.createProduct({\n      name: \"Cordero Lechal Asado\",\n      description: \"Pierna de cordero lechal asado con hierbas aromáticas\",\n      price: \"32.00\",\n      categoryId: categoryPlatos.id\n    });\n\n    await dbStorage.createProduct({\n      name: \"Risotto de Setas y Trufa\",\n      description: \"Arroz arborio con setas variadas y aceite de trufa negra\",\n      price: \"22.50\",\n      categoryId: categoryPlatos.id\n    });\n\n    // Crear productos - Bebidas\n    await dbStorage.createProduct({\n      name: \"Agua Mineral San Pellegrino\",\n      description: \"Agua mineral italiana con gas, botella 750ml\",\n      price: \"3.50\",\n      categoryId: categoryBebidas.id\n    });\n\n    await dbStorage.createProduct({\n      name: \"Vino Tinto Reserva\",\n      description: \"Tempranillo D.O. Rioja Reserva, copa 175ml\",\n      price: \"6.50\",\n      categoryId: categoryBebidas.id\n    });\n\n    await dbStorage.createProduct({\n      name: \"Cerveza Estrella Galicia\",\n      description: \"Cerveza rubia gallega, botella 330ml\",\n      price: \"4.20\",\n      categoryId: categoryBebidas.id\n    });\n\n    await dbStorage.createProduct({\n      name: \"Café Espresso\",\n      description: \"Café expreso de tueste natural, origen Brasil\",\n      price: \"2.80\",\n      categoryId: categoryBebidas.id\n    });\n\n    await dbStorage.createProduct({\n      name: \"Zumo Natural de Naranja\",\n      description: \"Zumo recién exprimido de naranjas valencianas\",\n      price: \"4.50\",\n      categoryId: categoryBebidas.id\n    });\n\n    // Crear productos - Postres\n    await dbStorage.createProduct({\n      name: \"Tiramisú de la Casa\",\n      description: \"Tiramisú tradicional con mascarpone, café y cacao\",\n      price: \"7.50\",\n      categoryId: categoryPostres.id\n    });\n\n    await dbStorage.createProduct({\n      name: \"Crema Catalana\",\n      description: \"Crema catalana tradicional con azúcar caramelizado\",\n      price: \"6.80\",\n      categoryId: categoryPostres.id\n    });\n\n    await dbStorage.createProduct({\n      name: \"Tarta de Queso con Frutos Rojos\",\n      description: \"Tarta cremosa de queso philadelphia con mermelada casera\",\n      price: \"8.20\",\n      categoryId: categoryPostres.id\n    });\n\n    await dbStorage.createProduct({\n      name: \"Sorbete de Limón\",\n      description: \"Sorbete artesanal de limón siciliano\",\n      price: \"5.50\",\n      categoryId: categoryPostres.id\n    });\n\n    console.log(\"Database seeded successfully with real restaurant data!\");\n    \n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n    throw error;\n  }\n}","size_bytes":5043},"client/src/pages/admin-configuracion.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function AdminConfiguracion() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setLocation(\"/admin\")}\n            className=\"hover-elevate active-elevate-2\"\n            data-testid=\"button-back-admin\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Volver al Panel\n          </Button>\n          <h1 className=\"text-3xl font-bold text-primary\">Configuración</h1>\n        </div>\n\n        {/* Content */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Configuración - Próximamente</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground text-lg\">\n              Esta sección estará disponible próximamente. Aquí podrás configurar el sistema y las integraciones del restaurante.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":1389},"client/src/pages/admin-empleados.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function AdminEmpleados() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setLocation(\"/admin\")}\n            className=\"hover-elevate active-elevate-2\"\n            data-testid=\"button-back-admin\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Volver al Panel\n          </Button>\n          <h1 className=\"text-3xl font-bold text-primary\">Gestión de Empleados</h1>\n        </div>\n\n        {/* Content */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Gestión de Empleados - Próximamente</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground text-lg\">\n              Esta sección estará disponible próximamente. Aquí podrás administrar usuarios, permisos y la información del personal del restaurante.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":1419},"client/src/pages/admin-menu.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function AdminMenu() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setLocation(\"/admin\")}\n            className=\"hover-elevate active-elevate-2\"\n            data-testid=\"button-back-admin\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Volver al Panel\n          </Button>\n          <h1 className=\"text-3xl font-bold text-primary\">Gestión de Menú</h1>\n        </div>\n\n        {/* Content */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Gestión de Menú - Próximamente</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground text-lg\">\n              Esta sección estará disponible próximamente. Aquí podrás administrar las categorías y productos del menú del restaurante.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":1394},"client/src/pages/admin-ventas.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function AdminVentas() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setLocation(\"/admin\")}\n            className=\"hover-elevate active-elevate-2\"\n            data-testid=\"button-back-admin\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Volver al Panel\n          </Button>\n          <h1 className=\"text-3xl font-bold text-primary\">Reportes y Ventas</h1>\n        </div>\n\n        {/* Content */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Reportes y Ventas - Próximamente</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground text-lg\">\n              Esta sección estará disponible próximamente. Aquí podrás ver estadísticas detalladas y reportes de ventas del restaurante.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":1396},"client/src/components/PaymentModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  DollarSign, \n  Calculator, \n  Gift, \n  Trash2, \n  CreditCard, \n  Banknote,\n  QrCode,\n  AlertCircle\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { OrderItemWithProduct } from \"@shared/schema\";\n\n// Colombian Payment Methods - SumaPOS Colombia\ntype ColombianPaymentMethod = \"efectivo\" | \"datafono_debito\" | \"datafono_credito\" | \"qr_bancolombia\";\n\ninterface PaymentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  tableId: number;\n  orderItems: OrderItemWithProduct[];\n  subtotal: number;\n  tax: number;\n  total: number;\n  onPaymentComplete: (paymentData: {\n    items: OrderItemWithProduct[];\n    subtotal: number;\n    tax: number;\n    total: number;\n    paymentMethod: string;\n    timestamp: string;\n    tableId: number;\n  }) => void;\n}\n\nexport default function PaymentModal({\n  isOpen,\n  onClose,\n  tableId,\n  orderItems,\n  subtotal,\n  tax,\n  total,\n  onPaymentComplete,\n}: PaymentModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Colombian Payment State\n  const [paymentMethod, setPaymentMethod] = useState<ColombianPaymentMethod>(\"efectivo\");\n  const [cashReceived, setCashReceived] = useState<string>(\"\");\n  const [tip, setTip] = useState<number>(0);\n  const [discount, setDiscount] = useState<number>(0);\n  const [discountType, setDiscountType] = useState<\"percentage\" | \"fixed\">(\"percentage\");\n  const [processing, setProcessing] = useState(false);\n\n  // Datáfono fields - SIN números de tarjeta por seguridad\n  const [datafonoTransactionId, setDatafonoTransactionId] = useState<string>(\"\");\n\n  // QR Bancolombia field\n  const [qrReference, setQrReference] = useState<string>(\"\");\n\n  // Calculate final amounts with tip and discount - Impoconsumo 8% Colombia\n  const discountAmount = discountType === \"percentage\" \n    ? (subtotal * discount) / 100 \n    : discount;\n  const finalSubtotal = Math.max(0, subtotal - discountAmount);\n  const finalImpoconsumo = finalSubtotal * 0.08; // 8% Impoconsumo Colombia\n  const finalTotal = finalSubtotal + finalImpoconsumo + tip;\n  const change = paymentMethod === \"efectivo\" ? Math.max(0, parseFloat(cashReceived) - finalTotal) : 0;\n\n  // Colombian Price Formatting (COP)\n  const formatColombianPrice = (price: number) => {\n    return new Intl.NumberFormat('es-CO', {\n      style: 'currency',\n      currency: 'COP',\n    }).format(price);\n  };\n\n  // Payment completion mutation - Colombian methods\n  const completePaymentMutation = useMutation({\n    mutationFn: async (paymentData: any) => {\n      return await apiRequest('POST', '/api/payments/complete-colombian', paymentData);\n    },\n    onSuccess: (response, paymentData) => {\n      // CRITICAL: Pass complete payment data BEFORE invalidation clears cache\n      const completePaymentData = {\n        items: [...orderItems], // Snapshot before clearing\n        subtotal: finalSubtotal,\n        tax: finalImpoconsumo, \n        total: finalTotal,\n        paymentMethod: paymentData.paymentMethod,\n        timestamp: new Date().toISOString(),\n        tableId: tableId,\n      };\n      \n      onPaymentComplete(completePaymentData);\n      \n      // Clear cache AFTER callback has data\n      queryClient.invalidateQueries({ queryKey: ['/api/tables'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/order-items', tableId] });\n      toast({\n        title: \"¡Pago completado!\",\n        description: \"Mesa liberada exitosamente - SumaPOS Colombia\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      console.error('Colombian payment error:', error);\n      toast({\n        title: \"Error en el pago\",\n        description: error.message || \"No se pudo completar el pago. Intenta de nuevo.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Handle Colombian Efectivo Payment\n  const handleEfectivoPayment = async () => {\n    if (parseFloat(cashReceived) < finalTotal) {\n      toast({\n        title: \"Efectivo insuficiente\",\n        description: `Se requieren ${formatColombianPrice(finalTotal)}`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setProcessing(true);\n    try {\n      await completePaymentMutation.mutateAsync({\n        tableId,\n        paymentMethod: \"efectivo\",\n        subtotal: finalSubtotal,\n        impoconsumo: finalImpoconsumo,\n        tip,\n        discount: discountAmount,\n        discountType,\n        cashReceived: parseFloat(cashReceived),\n        change: change\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  // Handle Colombian Datáfono Payment\n  const handleDatafonoPayment = async () => {\n    if (!datafonoTransactionId.trim()) {\n      toast({\n        title: \"ID de transacción requerido\",\n        description: \"Ingresa el ID de transacción del datáfono\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Validate transaction ID format (basic)\n    if (datafonoTransactionId.length < 6) {\n      toast({\n        title: \"ID de transacción inválido\",\n        description: \"El ID debe tener al menos 6 caracteres\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setProcessing(true);\n    try {\n      // Derive type directly from selected tab to prevent desync\n      const datafonoType = paymentMethod === \"datafono_credito\" ? \"credito\" : \"debito\";\n      \n      await completePaymentMutation.mutateAsync({\n        tableId,\n        paymentMethod: paymentMethod,\n        subtotal: finalSubtotal,\n        impoconsumo: finalImpoconsumo,\n        tip,\n        discount: discountAmount,\n        discountType,\n        datafonoTransactionId: datafonoTransactionId,\n        datafonoType: datafonoType\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  // Handle QR Bancolombia Payment\n  const handleQrBancolombiaPayment = async () => {\n    if (!qrReference.trim()) {\n      toast({\n        title: \"Referencia QR requerida\",\n        description: \"Ingresa la referencia de pago QR Bancolombia\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Basic QR reference validation\n    if (qrReference.length < 8) {\n      toast({\n        title: \"Referencia QR inválida\",\n        description: \"La referencia debe tener al menos 8 caracteres\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setProcessing(true);\n    try {\n      await completePaymentMutation.mutateAsync({\n        tableId,\n        paymentMethod: \"qr_bancolombia\",\n        subtotal: finalSubtotal,\n        impoconsumo: finalImpoconsumo,\n        tip,\n        discount: discountAmount,\n        discountType,\n        qrReference: qrReference\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const setTipPercentage = (percentage: number) => {\n    setTip((subtotal * percentage) / 100);\n  };\n\n  const resetDiscount = () => {\n    setDiscount(0);\n    setDiscountType(\"percentage\");\n  };\n\n  const getPaymentMethodIcon = (method: ColombianPaymentMethod) => {\n    switch (method) {\n      case \"efectivo\": return <Banknote className=\"w-4 h-4\" />;\n      case \"datafono_debito\": return <CreditCard className=\"w-4 h-4\" />;\n      case \"datafono_credito\": return <CreditCard className=\"w-4 h-4\" />;\n      case \"qr_bancolombia\": return <QrCode className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getPaymentMethodName = (method: ColombianPaymentMethod) => {\n    switch (method) {\n      case \"efectivo\": return \"Efectivo\";\n      case \"datafono_debito\": return \"Datáfono Débito\";\n      case \"datafono_credito\": return \"Datáfono Crédito\";\n      case \"qr_bancolombia\": return \"QR Bancolombia\";\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"payment-modal-colombia\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <DollarSign className=\"w-5 h-5\" />\n            SumaPOS Colombia - Mesa {tableId}\n          </DialogTitle>\n          <DialogDescription>\n            Procesar pago con métodos colombianos - Impoconsumo 8%\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Left Column: Order Summary */}\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Resumen del Pedido</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {orderItems.map((item) => (\n                  <div key={item.id} className=\"flex justify-between items-center\">\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\">{item.product.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {formatColombianPrice(parseFloat(item.product.price))} × {item.quantity}\n                      </p>\n                    </div>\n                    <p className=\"font-semibold\">{formatColombianPrice(item.subtotal)}</p>\n                  </div>\n                ))}\n                \n                <Separator />\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Subtotal:</span>\n                    <span>{formatColombianPrice(subtotal)}</span>\n                  </div>\n                  \n                  {discountAmount > 0 && (\n                    <div className=\"flex justify-between text-green-600\">\n                      <span>Descuento:</span>\n                      <span>-{formatColombianPrice(discountAmount)}</span>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex justify-between\">\n                    <span className=\"flex items-center gap-1\">\n                      Impoconsumo (8%):\n                      <Badge variant=\"secondary\" className=\"text-xs\">Colombia</Badge>\n                    </span>\n                    <span>{formatColombianPrice(finalImpoconsumo)}</span>\n                  </div>\n                  \n                  {tip > 0 && (\n                    <div className=\"flex justify-between text-blue-600\">\n                      <span>Propina:</span>\n                      <span>{formatColombianPrice(tip)}</span>\n                    </div>\n                  )}\n                  \n                  <Separator />\n                  <div className=\"flex justify-between text-xl font-bold\">\n                    <span>Total COP:</span>\n                    <span>{formatColombianPrice(finalTotal)}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Tip Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <Gift className=\"w-4 h-4\" />\n                  Propina\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-4 gap-2\">\n                  {[10, 15, 20, 25].map((percentage) => (\n                    <Button\n                      key={percentage}\n                      variant={Math.abs(tip - (subtotal * percentage) / 100) < 0.01 ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setTipPercentage(percentage)}\n                      data-testid={`tip-${percentage}`}\n                    >\n                      {percentage}%\n                    </Button>\n                  ))}\n                </div>\n                <div className=\"flex gap-2\">\n                  <div className=\"flex-1\">\n                    <Label htmlFor=\"custom-tip\">Propina personalizada (COP)</Label>\n                    <Input\n                      id=\"custom-tip\"\n                      type=\"number\"\n                      step=\"100\" // Colombian pesos steps\n                      min=\"0\"\n                      value={tip}\n                      onChange={(e) => setTip(parseFloat(e.target.value) || 0)}\n                      placeholder=\"0\"\n                      data-testid=\"input-custom-tip\"\n                    />\n                  </div>\n                  <div className=\"flex items-end\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={() => setTip(0)}\n                      data-testid=\"button-clear-tip\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Discount Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <Calculator className=\"w-4 h-4\" />\n                  Descuentos\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex gap-2\">\n                  <div className=\"flex-1\">\n                    <Label htmlFor=\"discount\">Descuento</Label>\n                    <Input\n                      id=\"discount\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      value={discount}\n                      onChange={(e) => setDiscount(parseFloat(e.target.value) || 0)}\n                      placeholder=\"0\"\n                      data-testid=\"input-discount\"\n                    />\n                  </div>\n                  <div className=\"flex items-end gap-2\">\n                    <Button\n                      variant={discountType === \"percentage\" ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setDiscountType(\"percentage\")}\n                      data-testid=\"button-discount-percentage\"\n                    >\n                      %\n                    </Button>\n                    <Button\n                      variant={discountType === \"fixed\" ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setDiscountType(\"fixed\")}\n                      data-testid=\"button-discount-fixed\"\n                    >\n                      COP\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={resetDiscount}\n                      data-testid=\"button-clear-discount\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n                {discountAmount > 0 && (\n                  <p className=\"text-sm text-green-600\">\n                    Descuento aplicado: {formatColombianPrice(discountAmount)}\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column: Colombian Payment Methods */}\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <CreditCard className=\"w-4 h-4\" />\n                  Métodos de Pago Colombia\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Tabs value={paymentMethod} onValueChange={(value) => setPaymentMethod(value as ColombianPaymentMethod)}>\n                  <TabsList className=\"grid w-full grid-cols-2\">\n                    <TabsTrigger value=\"efectivo\" data-testid=\"tab-efectivo\">\n                      <Banknote className=\"w-4 h-4 mr-2\" />\n                      Efectivo\n                    </TabsTrigger>\n                    <TabsTrigger value=\"datafono_debito\" data-testid=\"tab-datafono-debito\">\n                      <CreditCard className=\"w-4 h-4 mr-2\" />\n                      Datáfono\n                    </TabsTrigger>\n                  </TabsList>\n                  \n                  <div className=\"mt-4 grid grid-cols-2 gap-2\">\n                    <TabsTrigger \n                      value=\"datafono_credito\" \n                      className=\"w-full\"\n                      data-testid=\"tab-datafono-credito\"\n                    >\n                      <CreditCard className=\"w-4 h-4 mr-2\" />\n                      D. Crédito\n                    </TabsTrigger>\n                    <TabsTrigger \n                      value=\"qr_bancolombia\" \n                      className=\"w-full\"\n                      data-testid=\"tab-qr-bancolombia\"\n                    >\n                      <QrCode className=\"w-4 h-4 mr-2\" />\n                      QR Banco\n                    </TabsTrigger>\n                  </div>\n\n                  {/* Efectivo Tab */}\n                  <TabsContent value=\"efectivo\" className=\"space-y-4\">\n                    <div className=\"space-y-3\">\n                      <div>\n                        <Label htmlFor=\"cash-received\">Efectivo recibido (COP)</Label>\n                        <Input\n                          id=\"cash-received\"\n                          type=\"number\"\n                          step=\"500\" // Colombian peso steps\n                          min=\"0\"\n                          value={cashReceived}\n                          onChange={(e) => setCashReceived(e.target.value)}\n                          placeholder={formatColombianPrice(finalTotal)}\n                          data-testid=\"input-cash-received\"\n                        />\n                      </div>\n                      \n                      {cashReceived && parseFloat(cashReceived) >= finalTotal && (\n                        <div className=\"p-3 bg-green-50 dark:bg-green-950 rounded-lg\">\n                          <p className=\"text-lg font-semibold text-green-700 dark:text-green-300\">\n                            Cambio: {formatColombianPrice(change)}\n                          </p>\n                        </div>\n                      )}\n                      \n                      <Button\n                        onClick={handleEfectivoPayment}\n                        disabled={!cashReceived || parseFloat(cashReceived) < finalTotal || processing}\n                        className=\"w-full\"\n                        size=\"lg\"\n                        data-testid=\"button-complete-efectivo-payment\"\n                      >\n                        {processing ? \"Procesando...\" : \"Completar Pago Efectivo\"}\n                      </Button>\n                    </div>\n                  </TabsContent>\n\n                  {/* Datáfono Débito Tab */}\n                  <TabsContent value=\"datafono_debito\" className=\"space-y-4\">\n                    <div className=\"space-y-3\">\n                      <div className=\"p-3 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                        <div className=\"flex items-start gap-2\">\n                          <AlertCircle className=\"w-4 h-4 text-blue-600 mt-0.5\" />\n                          <div className=\"text-sm text-blue-700 dark:text-blue-300\">\n                            <strong>Datáfono Débito</strong><br />\n                            Solo ingresa el ID de transacción. SumaPOS Colombia protege datos de tarjeta.\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"datafono-transaction-id\">ID de Transacción</Label>\n                        <Input\n                          id=\"datafono-transaction-id\"\n                          type=\"text\"\n                          value={datafonoTransactionId}\n                          onChange={(e) => setDatafonoTransactionId(e.target.value)}\n                          placeholder=\"Ej: TRX123456789\"\n                          data-testid=\"input-datafono-transaction-id\"\n                        />\n                      </div>\n                      \n                      <Button\n                        onClick={handleDatafonoPayment}\n                        disabled={!datafonoTransactionId.trim() || processing}\n                        className=\"w-full\"\n                        size=\"lg\"\n                        data-testid=\"button-complete-datafono-debito-payment\"\n                      >\n                        {processing ? \"Procesando...\" : `Pagar ${formatColombianPrice(finalTotal)} - Débito`}\n                      </Button>\n                    </div>\n                  </TabsContent>\n\n                  {/* Datáfono Crédito Tab */}\n                  <TabsContent value=\"datafono_credito\" className=\"space-y-4\">\n                    <div className=\"space-y-3\">\n                      <div className=\"p-3 bg-purple-50 dark:bg-purple-950 rounded-lg\">\n                        <div className=\"flex items-start gap-2\">\n                          <AlertCircle className=\"w-4 h-4 text-purple-600 mt-0.5\" />\n                          <div className=\"text-sm text-purple-700 dark:text-purple-300\">\n                            <strong>Datáfono Crédito</strong><br />\n                            Solo ingresa el ID de transacción. Sin números de tarjeta por seguridad.\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"datafono-transaction-id-credit\">ID de Transacción</Label>\n                        <Input\n                          id=\"datafono-transaction-id-credit\"\n                          type=\"text\"\n                          value={datafonoTransactionId}\n                          onChange={(e) => setDatafonoTransactionId(e.target.value)}\n                          placeholder=\"Ej: TRX987654321\"\n                          data-testid=\"input-datafono-transaction-id-credit\"\n                        />\n                      </div>\n                      \n                      <Button\n                        onClick={handleDatafonoPayment}\n                        disabled={!datafonoTransactionId.trim() || processing}\n                        className=\"w-full\"\n                        size=\"lg\"\n                        data-testid=\"button-complete-datafono-credito-payment\"\n                      >\n                        {processing ? \"Procesando...\" : `Pagar ${formatColombianPrice(finalTotal)} - Crédito`}\n                      </Button>\n                    </div>\n                  </TabsContent>\n\n                  {/* QR Bancolombia Tab */}\n                  <TabsContent value=\"qr_bancolombia\" className=\"space-y-4\">\n                    <div className=\"space-y-3\">\n                      <div className=\"p-3 bg-yellow-50 dark:bg-yellow-950 rounded-lg\">\n                        <div className=\"flex items-start gap-2\">\n                          <QrCode className=\"w-4 h-4 text-yellow-600 mt-0.5\" />\n                          <div className=\"text-sm text-yellow-700 dark:text-yellow-300\">\n                            <strong>QR Bancolombia Negro Interoperable</strong><br />\n                            Ingresa la referencia de pago generada por la app Bancolombia.\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"qr-reference\">Referencia de Pago QR</Label>\n                        <Input\n                          id=\"qr-reference\"\n                          type=\"text\"\n                          value={qrReference}\n                          onChange={(e) => setQrReference(e.target.value)}\n                          placeholder=\"Ej: QR123456789ABC\"\n                          data-testid=\"input-qr-reference\"\n                        />\n                      </div>\n                      \n                      <Button\n                        onClick={handleQrBancolombiaPayment}\n                        disabled={!qrReference.trim() || processing}\n                        className=\"w-full\"\n                        size=\"lg\"\n                        data-testid=\"button-complete-qr-payment\"\n                      >\n                        {processing ? \"Procesando...\" : `Pagar ${formatColombianPrice(finalTotal)} - QR`}\n                      </Button>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n\n            {/* Payment Summary Card */}\n            <Card className=\"bg-muted/50\">\n              <CardHeader>\n                <CardTitle className=\"text-sm flex items-center gap-2\">\n                  {getPaymentMethodIcon(paymentMethod)}\n                  {getPaymentMethodName(paymentMethod)} Seleccionado\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex justify-between text-lg font-bold\">\n                  <span>Total a Pagar:</span>\n                  <span className=\"text-green-600\">{formatColombianPrice(finalTotal)}</span>\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Incluye Impoconsumo 8% colombiano\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        <div className=\"flex gap-2 pt-4\">\n          <Button\n            variant=\"outline\"\n            onClick={onClose}\n            disabled={processing}\n            className=\"flex-1\"\n            data-testid=\"button-cancel-payment\"\n          >\n            Cancelar\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":26178},"client/src/pages/order-management.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation, useParams } from \"wouter\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ArrowLeft, Users, Receipt, CreditCard, Loader2, Trash2, Edit3 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport PaymentModal from \"@/components/PaymentModal\";\nimport type { OrderItemWithProduct, Table } from \"@shared/schema\";\n\n// Initialize Stripe\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY!);\n\nexport default function OrderManagement() {\n  const [, setLocation] = useLocation();\n  const params = useParams();\n  const { auth } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const tableId = params.tableId ? parseInt(params.tableId) : null;\n  const mesaId = auth.mesa_id || tableId;\n  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);\n  const [isInvoiceFinalized, setIsInvoiceFinalized] = useState(false);\n  const [finalizedOrderData, setFinalizedOrderData] = useState<{\n    items: OrderItemWithProduct[];\n    total: number;\n    paymentMethod: string;\n    timestamp: string;\n  } | null>(null);\n\n  // Redirect if not authenticated or not cashier\n  useEffect(() => {\n    if (!auth.isAuthenticated || auth.role !== \"cajero\" || !tableId) {\n      setLocation('/login');\n      return;\n    }\n  }, [auth.isAuthenticated, auth.role, tableId, setLocation]);\n\n  const handleBackToTableMap = () => {\n    setLocation('/table-map');\n  };\n\n  // Fetch table information\n  const { data: table } = useQuery<Table>({\n    queryKey: ['/api/tables', tableId],\n    queryFn: async () => {\n      console.log('Fetching table info for table:', tableId);\n      const response = await fetch(`/api/tables/${tableId}`);\n      if (!response.ok) throw new Error('Failed to fetch table');\n      return response.json();\n    },\n    enabled: !!tableId,\n  });\n\n  // Fetch existing order items for this table with auto-refresh for real-time updates\n  const { data: orderItems = [], isLoading: orderItemsLoading } = useQuery<OrderItemWithProduct[]>({\n    queryKey: ['/api/order-items', mesaId],\n    queryFn: async () => {\n      console.log('Fetching order items for mesa_id:', mesaId);\n      const response = await fetch(`/api/order-items?mesa_id=${mesaId}`);\n      if (!response.ok) throw new Error('Failed to fetch order items');\n      const data = await response.json();\n      console.log('Order items fetched:', data);\n      return data;\n    },\n    enabled: !!mesaId,\n    // Auto-refresh every 15 seconds for real-time order updates\n    refetchInterval: 15000,\n    refetchIntervalInBackground: true,\n  });\n\n  // Delete order item mutation\n  const deleteOrderItemMutation = useMutation({\n    mutationFn: async (itemId: string) => {\n      return await apiRequest('DELETE', `/api/order-items/${itemId}?mesa_id=${mesaId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/order-items', mesaId] });\n      toast({\n        title: \"Producto eliminado\",\n        description: \"El producto se eliminó del pedido\",\n      });\n    },\n    onError: (error) => {\n      console.error('Delete item error:', error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo eliminar el producto\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Calculate totals\n  const subtotal = orderItems.reduce((sum, item) => sum + item.subtotal, 0);\n  const tax = subtotal * 0.08; // 8% Impoconsumo Colombia\n  const total = subtotal + tax;\n\n  const handleDeleteItem = (itemId: string) => {\n    deleteOrderItemMutation.mutate(itemId);\n  };\n\n  const handlePrintReceipt = () => {\n    // Create a printable receipt\n    const receiptContent = `\n      <div style=\"max-width: 300px; margin: 0 auto; font-family: monospace; padding: 20px;\">\n        <h2 style=\"text-align: center; margin-bottom: 20px;\">RESTAURANTE POS</h2>\n        <p style=\"text-align: center; margin-bottom: 20px;\">Mesa ${tableId}</p>\n        <hr>\n        ${orderItems.map(item => `\n          <div style=\"display: flex; justify-content: space-between; margin: 5px 0;\">\n            <span>${item.product.name} x${item.quantity}</span>\n            <span>${formatPrice(item.subtotal)}</span>\n          </div>\n        `).join('')}\n        <hr>\n        <div style=\"display: flex; justify-content: space-between; margin: 5px 0;\">\n          <span>Subtotal:</span>\n          <span>${formatPrice(subtotal)}</span>\n        </div>\n        <div style=\"display: flex; justify-content: space-between; margin: 5px 0;\">\n          <span>Impoconsumo (8%):</span>\n          <span>${formatPrice(tax)}</span>\n        </div>\n        <div style=\"display: flex; justify-content: space-between; margin: 10px 0; font-weight: bold; font-size: 1.2em;\">\n          <span>TOTAL:</span>\n          <span>${formatPrice(total)}</span>\n        </div>\n        <hr>\n        <p style=\"text-align: center; margin-top: 20px; font-size: 0.8em;\">\n          Fecha: ${new Date().toLocaleDateString('es-ES')}<br>\n          Hora: ${new Date().toLocaleTimeString('es-ES')}<br>\n          Cajero: ${auth.mesero_id}\n        </p>\n      </div>\n    `;\n\n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(`\n        <html>\n          <head>\n            <title>Factura Mesa ${tableId}</title>\n            <style>\n              body { margin: 0; padding: 0; }\n              @media print {\n                body { margin: 0; }\n              }\n            </style>\n          </head>\n          <body>\n            ${receiptContent}\n          </body>\n        </html>\n      `);\n      printWindow.document.close();\n      printWindow.print();\n      printWindow.close();\n    }\n  };\n\n  const handlePaymentComplete = (paymentData: {\n    items: OrderItemWithProduct[];\n    subtotal: number;\n    tax: number;\n    total: number;\n    paymentMethod: string;\n    timestamp: string;\n    tableId: number;\n  }) => {\n    // FIXED: Use received data from PaymentModal (no race condition)\n    setFinalizedOrderData(paymentData);\n    setIsPaymentModalOpen(false);\n    setIsInvoiceFinalized(true); // Mostrar pantalla de finalización\n  };\n\n  // Re-imprimir factura con datos finalizados\n  const handleReprintInvoice = () => {\n    if (!finalizedOrderData) return;\n    \n    const receiptContent = `\n      <div style=\"max-width: 300px; margin: 0 auto; font-family: monospace; padding: 20px;\">\n        <h2 style=\"text-align: center; margin-bottom: 20px;\">SumaPOS Colombia</h2>\n        <p style=\"text-align: center; margin-bottom: 20px;\">Mesa ${tableId}</p>\n        <p style=\"text-align: center; margin-bottom: 10px;\"><strong>*** FACTURA FINALIZADA ***</strong></p>\n        <hr>\n        ${finalizedOrderData.items.map(item => `\n          <div style=\"display: flex; justify-content: space-between; margin: 5px 0;\">\n            <span>${item.product.name} x${item.quantity}</span>\n            <span>${formatPrice(item.subtotal)}</span>\n          </div>\n        `).join('')}\n        <hr>\n        <div style=\"display: flex; justify-content: space-between; margin: 5px 0;\">\n          <span>Subtotal:</span>\n          <span>${formatPrice(finalizedOrderData.total * 0.926)}</span>\n        </div>\n        <div style=\"display: flex; justify-content: space-between; margin: 5px 0;\">\n          <span>Impoconsumo (8%):</span>\n          <span>${formatPrice(finalizedOrderData.total * 0.074)}</span>\n        </div>\n        <div style=\"display: flex; justify-content: space-between; margin: 10px 0; font-weight: bold; font-size: 1.2em;\">\n          <span>TOTAL PAGADO:</span>\n          <span>${formatPrice(finalizedOrderData.total)}</span>\n        </div>\n        <hr>\n        <p style=\"text-align: center; margin: 10px 0;\">\n          <strong>Método de Pago: ${finalizedOrderData.paymentMethod}</strong>\n        </p>\n        <p style=\"text-align: center; margin-top: 20px; font-size: 0.8em;\">\n          Fecha: ${new Date(finalizedOrderData.timestamp).toLocaleDateString('es-CO')}<br>\n          Hora: ${new Date(finalizedOrderData.timestamp).toLocaleTimeString('es-CO')}<br>\n          Cajero: ${auth.mesero_id}<br>\n          Estado: FACTURA CERRADA\n        </p>\n      </div>\n    `;\n\n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(`\n        <html>\n          <head>\n            <title>Factura Finalizada Mesa ${tableId}</title>\n            <style>\n              body { margin: 0; padding: 0; }\n              @media print {\n                body { margin: 0; }\n              }\n            </style>\n          </head>\n          <body>\n            ${receiptContent}\n          </body>\n        </html>\n      `);\n      printWindow.document.close();\n      printWindow.print();\n      printWindow.close();\n    }\n  };\n\n  // Enviar factura DIAN usando n8n\n  const handleSendDianInvoice = async () => {\n    if (!finalizedOrderData) return;\n    \n    try {\n      const response = await apiRequest('POST', '/api/n8n/send-dian-invoice', {\n        mesa_id: tableId,\n        cajero_id: auth.mesero_id,\n        items: finalizedOrderData.items,\n        total: finalizedOrderData.total,\n        paymentMethod: finalizedOrderData.paymentMethod,\n        timestamp: finalizedOrderData.timestamp,\n      });\n\n      toast({\n        title: \"Factura DIAN Enviada\",\n        description: \"La factura electrónica ha sido enviada a DIAN exitosamente\",\n      });\n    } catch (error) {\n      console.error('Error sending DIAN invoice:', error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo enviar la factura a DIAN. Intente nuevamente.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Cerrar definitivamente y volver al mapa\n  const handleFinalizeAndClose = () => {\n    setIsInvoiceFinalized(false);\n    setFinalizedOrderData(null);\n    setLocation('/table-map');\n  };\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('es-ES', {\n      style: 'currency',\n      currency: 'EUR',\n    }).format(price);\n  };\n\n  if (!auth.isAuthenticated || auth.role !== \"cajero\") {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"outline\"\n              onClick={handleBackToTableMap}\n              className=\"hover-elevate active-elevate-2\"\n              data-testid=\"button-back-table-map\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver al Mapa\n            </Button>\n            <h1 className=\"text-3xl font-bold text-primary\">\n              Gestión de Pedido - Mesa {tableId}\n            </h1>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm text-muted-foreground\">Cajero ID: {auth.mesero_id}</p>\n          </div>\n        </div>\n\n        {/* Table Information */}\n        {table && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"w-5 h-5\" />\n                Información de la Mesa\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-muted-foreground\">Número de Mesa</p>\n                  <p className=\"text-2xl font-bold text-primary\">{table.number}</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-muted-foreground\">Capacidad</p>\n                  <p className=\"text-2xl font-bold\">{table.capacity} personas</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-muted-foreground\">Estado</p>\n                  <Badge \n                    variant={table.status === \"occupied\" ? \"destructive\" : \"secondary\"}\n                    className=\"text-sm\"\n                  >\n                    {table.status === \"occupied\" ? \"Ocupada\" : table.status}\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Order Details */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Receipt className=\"w-5 h-5\" />\n              Detalles del Consumo\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {orderItemsLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"w-8 h-8 animate-spin text-primary mr-3\" />\n                <span className=\"text-lg text-muted-foreground\">Cargando pedido...</span>\n              </div>\n            ) : orderItems.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <div className=\"text-muted-foreground mb-3\">🍽️</div>\n                <h3 className=\"text-lg font-semibold mb-2\">No hay pedidos en esta mesa</h3>\n                <p className=\"text-muted-foreground\">\n                  La mesa no tiene productos ordenados actualmente.\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {/* Order Items List */}\n                <div className=\"space-y-3\">\n                  {orderItems.map((item) => (\n                    <div \n                      key={item.id} \n                      className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg group\"\n                      data-testid={`order-item-${item.id}`}\n                    >\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-lg\">{item.product.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {item.product.description}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground mt-1\">\n                          Precio unitario: {formatPrice(parseFloat(item.product.price))}\n                        </p>\n                      </div>\n                      <div className=\"text-center min-w-16\">\n                        <p className=\"text-sm text-muted-foreground\">Cantidad</p>\n                        <p className=\"text-2xl font-bold\">{item.quantity}</p>\n                      </div>\n                      <div className=\"text-right min-w-24\">\n                        <p className=\"text-sm text-muted-foreground\">Subtotal</p>\n                        <p className=\"text-xl font-bold text-primary\">\n                          {formatPrice(item.subtotal)}\n                        </p>\n                      </div>\n                      <div className=\"ml-4\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleDeleteItem(item.id)}\n                          disabled={deleteOrderItemMutation.isPending}\n                          className=\"opacity-0 group-hover:opacity-100 transition-opacity text-red-500 hover:text-red-700\"\n                          data-testid={`delete-item-${item.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                <Separator />\n\n                {/* Totals */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-lg\">Subtotal:</span>\n                    <span className=\"text-lg font-semibold\">{formatPrice(subtotal)}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-lg\">Impoconsumo (8%):</span>\n                    <span className=\"text-lg font-semibold\">{formatPrice(tax)}</span>\n                  </div>\n                  <Separator />\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-2xl font-bold\">Total:</span>\n                    <span className=\"text-2xl font-bold text-primary\">{formatPrice(total)}</span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        {orderItems.length > 0 && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Button \n              size=\"lg\" \n              variant=\"outline\"\n              onClick={handlePrintReceipt}\n              className=\"h-16 text-lg hover-elevate active-elevate-2\"\n              data-testid=\"button-print-receipt\"\n            >\n              <Receipt className=\"w-6 h-6 mr-3\" />\n              Imprimir Factura\n            </Button>\n            <Button \n              size=\"lg\"\n              onClick={() => setIsPaymentModalOpen(true)}\n              className=\"h-16 text-lg hover-elevate active-elevate-2\"\n              data-testid=\"button-finalize-payment\"\n            >\n              <CreditCard className=\"w-6 h-6 mr-3\" />\n              Finalizar y Pagar\n            </Button>\n          </div>\n        )}\n\n        {/* Payment Modal */}\n        <Elements stripe={stripePromise}>\n          <PaymentModal\n            isOpen={isPaymentModalOpen}\n            onClose={() => setIsPaymentModalOpen(false)}\n            tableId={tableId!}\n            orderItems={orderItems}\n            subtotal={subtotal}\n            tax={tax}\n            total={total}\n            onPaymentComplete={handlePaymentComplete}\n          />\n        </Elements>\n\n        {/* PANTALLA DE FINALIZACIÓN DE FACTURA */}\n        {isInvoiceFinalized && finalizedOrderData && (\n          <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n            <Card className=\"w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <CardHeader className=\"text-center bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-t-lg\">\n                <CardTitle className=\"text-2xl font-bold flex items-center justify-center gap-3\">\n                  <Receipt className=\"w-8 h-8\" />\n                  ¡Factura Finalizada Exitosamente!\n                </CardTitle>\n                <p className=\"text-green-100 mt-2\">Mesa {tableId} - Pago Completado</p>\n              </CardHeader>\n              \n              <CardContent className=\"p-6\">\n                {/* Resumen del pedido */}\n                <div className=\"mb-6\">\n                  <h3 className=\"text-lg font-semibold mb-4 text-primary\">Resumen del Pedido</h3>\n                  <div className=\"space-y-2\">\n                    {finalizedOrderData.items.map((item, index) => (\n                      <div key={index} className=\"flex justify-between items-center py-2 border-b border-muted\">\n                        <span className=\"font-medium\">{item.product.name} x{item.quantity}</span>\n                        <span className=\"font-semibold\">{formatPrice(item.subtotal)}</span>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  <div className=\"mt-4 space-y-2\">\n                    <div className=\"flex justify-between text-muted-foreground\">\n                      <span>Subtotal:</span>\n                      <span>{formatPrice(finalizedOrderData.total * 0.926)}</span>\n                    </div>\n                    <div className=\"flex justify-between text-muted-foreground\">\n                      <span>Impoconsumo (8%):</span>\n                      <span>{formatPrice(finalizedOrderData.total * 0.074)}</span>\n                    </div>\n                    <Separator />\n                    <div className=\"flex justify-between text-xl font-bold text-primary\">\n                      <span>TOTAL PAGADO:</span>\n                      <span>{formatPrice(finalizedOrderData.total)}</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Información del pago */}\n                <div className=\"mb-6 p-4 bg-muted/50 rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Detalles del Pago</h4>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-muted-foreground\">Método:</span>\n                      <p className=\"font-medium\">{finalizedOrderData.paymentMethod}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Cajero:</span>\n                      <p className=\"font-medium\">ID {auth.mesero_id}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Fecha:</span>\n                      <p className=\"font-medium\">{new Date(finalizedOrderData.timestamp).toLocaleDateString('es-CO')}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Hora:</span>\n                      <p className=\"font-medium\">{new Date(finalizedOrderData.timestamp).toLocaleTimeString('es-CO')}</p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Botones de acción */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <Button\n                    size=\"lg\"\n                    variant=\"outline\"\n                    onClick={handleReprintInvoice}\n                    className=\"h-14 hover-elevate active-elevate-2\"\n                    data-testid=\"button-reprint-invoice\"\n                  >\n                    <Receipt className=\"w-5 h-5 mr-2\" />\n                    Re-imprimir Factura\n                  </Button>\n                  \n                  <Button\n                    size=\"lg\"\n                    variant=\"secondary\"\n                    onClick={handleSendDianInvoice}\n                    className=\"h-14 hover-elevate active-elevate-2\"\n                    data-testid=\"button-send-dian\"\n                  >\n                    <CreditCard className=\"w-5 h-5 mr-2\" />\n                    Enviar a DIAN\n                  </Button>\n                  \n                  <Button\n                    size=\"lg\"\n                    onClick={handleFinalizeAndClose}\n                    className=\"h-14 hover-elevate active-elevate-2 bg-green-600 hover:bg-green-700\"\n                    data-testid=\"button-finalize-close\"\n                  >\n                    <ArrowLeft className=\"w-5 h-5 mr-2\" />\n                    Cerrar y Continuar\n                  </Button>\n                </div>\n\n                <div className=\"mt-6 text-center\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    La mesa ha sido liberada automáticamente y está disponible para nuevos clientes.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":23707},"server/n8n-client.ts":{"content":"import crypto from \"crypto\";\n\n// N8N Workflow Types - SumaPOS Colombia\nexport interface N8nWorkflowTrigger {\n  workflowId: string;\n  data: Record<string, any>;\n  endpoint?: string; // For specific workflow endpoints\n}\n\nexport interface N8nWorkflowResponse {\n  success: boolean;\n  executionId?: string;\n  data?: any;\n  error?: string;\n}\n\nexport interface N8nConfig {\n  baseUrl: string;\n  apiKey?: string;\n  hmacSecret?: string;\n  timeout: number;\n  mode?: 'production' | 'test'; // For webhook path selection\n}\n\n/**\n * N8nClient - Cliente para workflows inteligentes SumaPOS Colombia\n * \n * WORKFLOWS PRINCIPALES:\n * 1. Payment Processing (Impoconsumo 8%)\n * 2. DIAN Invoice Generation (CUFE, XML firmado)\n * 3. Analytics & KPI Calculation\n * 4. Automated Daily Closure\n * 5. Inventory Intelligence (30min)\n * 6. Employee Shift Management\n * 7. Expense Tracking & Approval\n * 8. Supplier Integration\n * 9. Real-time Dashboard Updates\n * 10. ChefBot IA Integration\n * 11. Peak Hours Analysis\n * 12. Performance Monitoring\n */\nexport class N8nClient {\n  private config: N8nConfig;\n  private baseHeaders: Record<string, string>;\n\n  constructor(config: N8nConfig) {\n    this.config = {\n      ...config,\n      timeout: config.timeout || 30000, // 30 seconds default\n      mode: config.mode || 'production'\n    };\n\n    // Normalize baseUrl - remove trailing slash\n    this.config.baseUrl = this.config.baseUrl.replace(/\\/$/, '');\n\n    this.baseHeaders = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'User-Agent': 'SumaPOS-Colombia/1.0'\n    };\n\n    // API Key authentication (if provided)\n    if (config.apiKey) {\n      this.baseHeaders['X-N8N-API-KEY'] = config.apiKey;\n    }\n  }\n\n  /**\n   * Genera signature HMAC-SHA256 para seguridad\n   */\n  private generateHmacSignature(data: string, timestamp: string): string {\n    if (!this.config.hmacSecret) {\n      throw new Error(\"HMAC secret no configurado\");\n    }\n\n    const payload = `${timestamp}.${data}`;\n    return crypto\n      .createHmac('sha256', this.config.hmacSecret)\n      .update(payload)\n      .digest('hex');\n  }\n\n  /**\n   * Crea AbortSignal con timeout (compatible Node 16+)\n   */\n  private createTimeoutSignal(timeoutMs: number): AbortSignal {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeoutMs);\n    \n    // Clean up timeout if request completes normally\n    controller.signal.addEventListener('abort', () => {\n      clearTimeout(timeoutId);\n    }, { once: true });\n    \n    return controller.signal;\n  }\n\n  /**\n   * Trigger workflow n8n con autenticación HMAC\n   */\n  async triggerWorkflow(trigger: N8nWorkflowTrigger): Promise<N8nWorkflowResponse> {\n    const timestamp = Date.now().toString();\n    const data = JSON.stringify(trigger.data);\n\n    try {\n      // Headers con autenticación HMAC\n      const headers = { ...this.baseHeaders };\n      if (this.config.hmacSecret) {\n        const signature = this.generateHmacSignature(data, timestamp);\n        headers['X-N8N-Signature'] = `t=${timestamp},v1=${signature}`;\n      }\n\n      // Construir URL del workflow con modo correcto\n      const endpoint = trigger.endpoint || this.buildWebhookEndpoint(trigger.workflowId);\n      const url = `${this.config.baseUrl}/${endpoint}`;\n\n      console.log(`🤖 N8N: Triggering workflow ${trigger.workflowId}...`);\n\n      const response = await fetch(url, {\n        method: 'POST',\n        headers,\n        body: data,\n        signal: this.createTimeoutSignal(this.config.timeout)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text().catch(() => 'Unknown error');\n        throw new Error(`N8N API error ${response.status}: ${errorText}`);\n      }\n\n      const result = await response.json().catch(() => ({}));\n\n      console.log(`✅ N8N: Workflow ${trigger.workflowId} executed successfully`);\n\n      return {\n        success: true,\n        executionId: result.executionId || result.id || 'unknown',\n        data: result\n      };\n\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n      console.error(`❌ N8N: Error triggering workflow ${trigger.workflowId}:`, errorMsg);\n\n      return {\n        success: false,\n        error: errorMsg\n      };\n    }\n  }\n\n  /**\n   * Construye endpoint de webhook según el modo\n   */\n  private buildWebhookEndpoint(workflowId: string): string {\n    const webhookPrefix = this.config.mode === 'test' ? 'webhook-test' : 'webhook';\n    return `${webhookPrefix}/${workflowId}`;\n  }\n\n  /**\n   * Workflow 1: Procesar pago colombiano con Impoconsumo 8%\n   */\n  async processColombianPayment(paymentData: {\n    tableId: number;\n    employeeId: string;\n    paymentMethod: string;\n    amount: number;\n    subtotal: number;\n    impoconsumo: number;\n    tip: number;\n    items: any[];\n  }): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({\n      workflowId: 'payment-processing-colombia',\n      data: {\n        ...paymentData,\n        country: 'CO',\n        taxRate: 0.08, // Impoconsumo 8%\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n\n  /**\n   * Workflow 2: Generar factura DIAN electrónica\n   */\n  async generateDianInvoice(invoiceData: {\n    paymentId: string;\n    invoiceNumber: string;\n    nit: string;\n    clientName: string;\n    subtotal: number;\n    impoconsumo: number;\n    totalAmount: number;\n  }): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({\n      workflowId: 'dian-invoice-generation',\n      data: {\n        ...invoiceData,\n        country: 'CO',\n        taxType: 'impoconsumo',\n        dianEnvironment: process.env.NODE_ENV === 'production' ? 'production' : 'test'\n      }\n    });\n  }\n\n  /**\n   * Workflow 3: Calcular analytics y KPIs\n   */\n  async calculateAnalytics(analyticsData: {\n    date: string;\n    restaurantId?: string;\n    includeEmployeeMetrics?: boolean;\n    includePeakHours?: boolean;\n  }): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({\n      workflowId: 'analytics-calculation',\n      data: {\n        ...analyticsData,\n        timezone: 'America/Bogota'\n      }\n    });\n  }\n\n  /**\n   * Workflow 4: Cierre automático diario\n   */\n  async triggerDailyClosure(closureData: {\n    date: string;\n    expectedCash: number;\n    actualCash?: number;\n    employeeId: string;\n  }): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({\n      workflowId: 'daily-closure-automation',\n      data: {\n        ...closureData,\n        timezone: 'America/Bogota',\n        currency: 'COP'\n      }\n    });\n  }\n\n  /**\n   * Workflow 5: Control de inventario inteligente (cada 30min)\n   */\n  async checkInventoryLevels(inventoryData: {\n    restaurantId?: string;\n    lowStockThreshold?: number;\n    criticalStockThreshold?: number;\n  }): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({\n      workflowId: 'inventory-intelligence',\n      data: {\n        ...inventoryData,\n        checkInterval: '30min',\n        autoReorder: true\n      }\n    });\n  }\n\n  /**\n   * Workflow 6: Gestión de turnos empleados\n   */\n  async manageEmployeeShift(shiftData: {\n    employeeId: string;\n    action: 'start' | 'end' | 'break' | 'status';\n    shiftId?: string;\n    hoursWorked?: number;\n  }): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({\n      workflowId: 'employee-shift-management',\n      data: {\n        ...shiftData,\n        timestamp: new Date().toISOString(),\n        timezone: 'America/Bogota'\n      }\n    });\n  }\n\n  /**\n   * Workflow 7: Tracking de gastos y aprobación\n   */\n  async trackExpense(expenseData: {\n    amount: number;\n    category: string;\n    supplierId?: string;\n    description: string;\n    employeeId: string;\n    requiresApproval?: boolean;\n  }): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({\n      workflowId: 'expense-tracking',\n      data: {\n        ...expenseData,\n        currency: 'COP',\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n\n  /**\n   * Workflow 8: Integración con proveedores\n   */\n  async integrateSupplier(supplierData: {\n    supplierId: string;\n    action: 'sync_catalog' | 'place_order' | 'check_prices' | 'update_contact';\n    orderData?: any;\n  }): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({\n      workflowId: 'supplier-integration',\n      data: {\n        ...supplierData,\n        country: 'CO'\n      }\n    });\n  }\n\n  /**\n   * Workflow 9: Actualización dashboard en tiempo real\n   */\n  async updateDashboard(dashboardData: {\n    type: 'sales' | 'inventory' | 'employees' | 'analytics';\n    data: any;\n    broadcastToClients?: boolean;\n  }): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({\n      workflowId: 'realtime-dashboard-update',\n      data: {\n        ...dashboardData,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n\n  /**\n   * Workflow 10: ChefBot IA Integration\n   */\n  async triggerChefBot(chefBotData: {\n    action: 'menu_suggestion' | 'inventory_optimization' | 'cost_analysis' | 'demand_forecast';\n    context: any;\n    aiModel?: 'gpt-4' | 'claude' | 'local';\n  }): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({\n      workflowId: 'chefbot-ai-integration',\n      data: {\n        ...chefBotData,\n        restaurant_type: 'colombian',\n        language: 'es'\n      }\n    });\n  }\n\n  /**\n   * Workflow 11: Análisis de horas pico\n   */\n  async analyzePeakHours(analysisData: {\n    dateRange: { start: string; end: string };\n    includeWeatherData?: boolean;\n    includeEventsData?: boolean;\n  }): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({\n      workflowId: 'peak-hours-analysis',\n      data: {\n        ...analysisData,\n        timezone: 'America/Bogota',\n        country: 'CO'\n      }\n    });\n  }\n\n  /**\n   * Workflow 12: Monitoreo de rendimiento\n   */\n  async monitorPerformance(performanceData: {\n    employeeId?: string;\n    departmentId?: string;\n    metrics: string[];\n    period: 'daily' | 'weekly' | 'monthly';\n  }): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({\n      workflowId: 'performance-monitoring',\n      data: {\n        ...performanceData,\n        country: 'CO',\n        currency: 'COP'\n      }\n    });\n  }\n\n  /**\n   * Test de conectividad con n8n\n   */\n  async testConnection(): Promise<boolean> {\n    try {\n      const response = await this.triggerWorkflow({\n        workflowId: 'health-check',\n        data: { test: true, timestamp: new Date().toISOString() }\n      });\n      return response.success;\n    } catch (error) {\n      console.error('❌ N8N: Connection test failed:', error);\n      return false;\n    }\n  }\n}\n\n/**\n * Cliente No-Op para cuando n8n no está disponible\n */\nclass NoOpN8nClient {\n  async triggerWorkflow(trigger: N8nWorkflowTrigger): Promise<N8nWorkflowResponse> {\n    console.warn(`⚠️ N8N: Client not configured, skipping workflow ${trigger.workflowId}`);\n    return { success: false, error: 'N8N client not configured' };\n  }\n  \n  async testConnection(): Promise<boolean> {\n    return false;\n  }\n  \n  // Stub methods for all workflow functions\n  async processColombianPayment(): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({ workflowId: 'payment-processing-colombia', data: {} });\n  }\n  async generateDianInvoice(): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({ workflowId: 'dian-invoice-generation', data: {} });\n  }\n  async calculateAnalytics(): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({ workflowId: 'analytics-calculation', data: {} });\n  }\n  async triggerDailyClosure(): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({ workflowId: 'daily-closure-automation', data: {} });\n  }\n  async checkInventoryLevels(): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({ workflowId: 'inventory-intelligence', data: {} });\n  }\n  async manageEmployeeShift(): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({ workflowId: 'employee-shift-management', data: {} });\n  }\n  async trackExpense(): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({ workflowId: 'expense-tracking', data: {} });\n  }\n  async integrateSupplier(): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({ workflowId: 'supplier-integration', data: {} });\n  }\n  async updateDashboard(): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({ workflowId: 'realtime-dashboard-update', data: {} });\n  }\n  async triggerChefBot(): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({ workflowId: 'chefbot-ai-integration', data: {} });\n  }\n  async analyzePeakHours(): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({ workflowId: 'peak-hours-analysis', data: {} });\n  }\n  async monitorPerformance(): Promise<N8nWorkflowResponse> {\n    return this.triggerWorkflow({ workflowId: 'performance-monitoring', data: {} });\n  }\n}\n\n// Lazy singleton instance\nlet n8nClientInstance: N8nClient | NoOpN8nClient | null = null;\n\n/**\n * Obtener cliente n8n (lazy initialization)\n */\nexport function getN8nClient(): N8nClient | NoOpN8nClient {\n  if (n8nClientInstance) {\n    return n8nClientInstance;\n  }\n\n  const baseUrl = process.env.N8N_ORDER_BASE_URL;\n  \n  if (!baseUrl) {\n    console.warn('⚠️ N8N: N8N_ORDER_BASE_URL not configured, using No-Op client');\n    n8nClientInstance = new NoOpN8nClient();\n    return n8nClientInstance;\n  }\n\n  try {\n    n8nClientInstance = new N8nClient({\n      baseUrl,\n      apiKey: process.env.N8N_API_KEY,\n      hmacSecret: process.env.N8N_HMAC_SECRET,\n      timeout: 45000, // 45 seconds for complex workflows\n      mode: process.env.NODE_ENV === 'production' ? 'production' : 'test'\n    });\n    \n    console.log('✅ N8N: Client initialized successfully');\n    return n8nClientInstance;\n  } catch (error) {\n    console.error('❌ N8N: Failed to initialize client:', error);\n    n8nClientInstance = new NoOpN8nClient();\n    return n8nClientInstance;\n  }\n}\n\n/**\n * Health check de n8n al startup (non-fatal)\n */\nexport async function checkN8nHealth(): Promise<boolean> {\n  try {\n    const client = getN8nClient();\n    const isHealthy = await client.testConnection();\n    \n    if (isHealthy) {\n      console.log('🟢 N8N: Health check passed - workflows available');\n    } else {\n      console.warn('🟡 N8N: Health check failed - workflows may be limited');\n    }\n    \n    return isHealthy;\n  } catch (error) {\n    console.warn('🟡 N8N: Health check error (non-fatal):', error);\n    return false;\n  }\n}","size_bytes":14491},"server/payments-service.ts":{"content":"import {\n  type Payment,\n  type Invoice,\n  type InsertPayment,\n  type InsertInvoice,\n  paymentMethodSchema\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// Colombian Payment Methods - SumaPOS Colombia\nexport type ColombianPaymentMethod = \"efectivo\" | \"datafono_debito\" | \"datafono_credito\" | \"qr_bancolombia\";\n\nexport interface PaymentCalculation {\n  subtotal: number;\n  impoconsumo: number; // 8% Colombia\n  tip: number;\n  discount: number;\n  finalTotal: number;\n  change?: number; // Solo para efectivo\n}\n\nexport interface ColombianPaymentData {\n  tableId: number;\n  employeeId: string;\n  paymentMethod: ColombianPaymentMethod;\n  subtotal: number;\n  tip: number;\n  discount: number;\n  discountType: \"percentage\" | \"fixed\";\n  // Método específico data\n  cashReceived?: number; // Efectivo\n  datafonoTransactionId?: string; // Datáfono\n  datafonoType?: \"debito\" | \"credito\"; // Datáfono\n  qrReference?: string; // QR Bancolombia\n}\n\nexport interface PaymentValidationResult {\n  isValid: boolean;\n  errors: string[];\n}\n\n/**\n * PaymentService - Servicio colombiano para métodos de pago\n * Maneja: Efectivo, Datáfono (débito/crédito), QR Bancolombia\n * Impoconsumo 8%, validación, cálculos autoritativos\n */\nexport class PaymentService {\n  private static readonly IMPOCONSUMO_RATE = 0.08; // 8% Colombia\n  \n  /**\n   * Calcula totales con Impoconsumo 8% colombiano\n   */\n  static calculateTotals(\n    subtotal: number, \n    tip: number = 0, \n    discount: number = 0, \n    discountType: \"percentage\" | \"fixed\" = \"percentage\"\n  ): PaymentCalculation {\n    // Validar inputs\n    if (subtotal < 0 || tip < 0 || discount < 0) {\n      throw new Error(\"Los montos no pueden ser negativos\");\n    }\n\n    // Calcular descuento\n    const discountAmount = discountType === \"percentage\" \n      ? Math.round((subtotal * discount) / 100 * 100) / 100\n      : Math.round(discount * 100) / 100;\n\n    const finalSubtotal = Math.max(0, subtotal - discountAmount);\n    \n    // Calcular Impoconsumo 8% sobre subtotal con descuento\n    const impoconsumo = Math.round(finalSubtotal * this.IMPOCONSUMO_RATE * 100) / 100;\n    const tipAmount = Math.round(tip * 100) / 100;\n    const finalTotal = finalSubtotal + impoconsumo + tipAmount;\n\n    return {\n      subtotal: Math.round(subtotal * 100) / 100,\n      impoconsumo,\n      tip: tipAmount,\n      discount: discountAmount,\n      finalTotal: Math.round(finalTotal * 100) / 100\n    };\n  }\n\n  /**\n   * Valida método de pago colombiano específico\n   */\n  static validateColombianPayment(paymentData: ColombianPaymentData): PaymentValidationResult {\n    const errors: string[] = [];\n    \n    // Validación general\n    if (!paymentData.employeeId || paymentData.employeeId.trim() === \"\") {\n      errors.push(\"ID de empleado es requerido\");\n    }\n    \n    if (!paymentData.tableId || paymentData.tableId <= 0) {\n      errors.push(\"ID de mesa válido es requerido\");\n    }\n\n    if (paymentData.subtotal <= 0) {\n      errors.push(\"Subtotal debe ser mayor que cero\");\n    }\n\n    // Validación de esquema Zod\n    try {\n      paymentMethodSchema.parse(paymentData.paymentMethod);\n    } catch {\n      errors.push(\"Método de pago inválido para Colombia\");\n    }\n\n    // Validaciones específicas por método\n    switch (paymentData.paymentMethod) {\n      case \"efectivo\":\n        if (!paymentData.cashReceived || paymentData.cashReceived <= 0) {\n          errors.push(\"Monto recibido en efectivo es requerido\");\n        } else {\n          const totals = this.calculateTotals(\n            paymentData.subtotal, \n            paymentData.tip, \n            paymentData.discount, \n            paymentData.discountType\n          );\n          if (paymentData.cashReceived < totals.finalTotal) {\n            errors.push(`Efectivo insuficiente. Se requieren $${totals.finalTotal.toFixed(2)}`);\n          }\n        }\n        break;\n\n      case \"datafono_debito\":\n      case \"datafono_credito\":\n        if (!paymentData.datafonoTransactionId || paymentData.datafonoTransactionId.trim() === \"\") {\n          errors.push(\"ID de transacción de datáfono es requerido\");\n        }\n        if (!paymentData.datafonoType) {\n          errors.push(\"Tipo de datáfono (débito/crédito) es requerido\");\n        }\n        // IMPORTANTE: NO validamos números de tarjeta por seguridad\n        break;\n\n      case \"qr_bancolombia\":\n        if (!paymentData.qrReference || paymentData.qrReference.trim() === \"\") {\n          errors.push(\"Referencia de QR Bancolombia es requerida\");\n        }\n        break;\n\n      default:\n        errors.push(\"Método de pago no reconocido\");\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Procesa pago con método colombiano - SOLO cálculos y validación\n   * La persistencia se hace en el endpoint\n   */\n  static processColombianPayment(paymentData: ColombianPaymentData): {\n    payment: InsertPayment;\n    calculation: PaymentCalculation;\n    change?: number;\n  } {\n    // Validar datos\n    const validation = this.validateColombianPayment(paymentData);\n    if (!validation.isValid) {\n      throw new Error(`Errores de validación: ${validation.errors.join(\", \")}`);\n    }\n\n    // Calcular totales\n    const calculation = this.calculateTotals(\n      paymentData.subtotal,\n      paymentData.tip,\n      paymentData.discount,\n      paymentData.discountType\n    );\n\n    // Calcular cambio para efectivo\n    let change: number | undefined;\n    if (paymentData.paymentMethod === \"efectivo\" && paymentData.cashReceived) {\n      change = Math.round((paymentData.cashReceived - calculation.finalTotal) * 100) / 100;\n    }\n\n    // Crear objeto Payment colombiano (convertir números a strings para Drizzle)\n    const payment: InsertPayment = {\n      tableId: paymentData.tableId,\n      employeeId: paymentData.employeeId,\n      paymentMethod: paymentData.paymentMethod,\n      amount: calculation.finalTotal.toString(),\n      subtotal: calculation.subtotal.toString(),\n      impoconsumo: calculation.impoconsumo.toString(),\n      tip: calculation.tip.toString(),\n      discount: calculation.discount.toString(),\n      discountType: paymentData.discountType,\n      // Campos específicos por método\n      datafonoTransactionId: paymentData.datafonoTransactionId,\n      datafonoType: paymentData.datafonoType,\n      qrReference: paymentData.qrReference,\n      cashReceived: paymentData.cashReceived?.toString(),\n      change: change?.toString(),\n      status: \"pending\" // Se cambiará a \"completed\" cuando se confirme\n    };\n\n    return {\n      payment,\n      calculation,\n      change\n    };\n  }\n\n  /**\n   * Genera factura DIAN básica (datos mínimos)\n   * La integración completa con n8n será en Fase 2\n   */\n  static generateBasicInvoice(payment: Payment, invoiceNumber: string): InsertInvoice {\n    // Generar CUFE temporal (en Fase 2 será generado por DIAN)\n    const cufe = `TEMP-${randomUUID()}`;\n    \n    const invoice: InsertInvoice = {\n      paymentId: payment.id!,\n      invoiceNumber,\n      cufe,\n      nit: \"900123456-1\", // NIT del restaurante - configurar en env\n      clientName: \"CONSUMIDOR FINAL\",\n      clientDocument: \"\",\n      clientDocumentType: \"CC\",\n      subtotal: payment.subtotal,\n      impoconsumo: payment.impoconsumo,\n      totalAmount: payment.amount,\n      qrCode: \"\", // Se generará en Fase 2\n      xmlSigned: \"\", // Se generará en Fase 2\n      dianStatus: \"pending\"\n    };\n\n    return invoice;\n  }\n\n  /**\n   * Formatea precio colombiano (COP)\n   */\n  static formatColombianPrice(amount: number): string {\n    return new Intl.NumberFormat('es-CO', {\n      style: 'currency',\n      currency: 'COP',\n    }).format(amount);\n  }\n\n  /**\n   * Obtiene descripción de método de pago en español\n   */\n  static getPaymentMethodDescription(method: ColombianPaymentMethod): string {\n    const descriptions = {\n      \"efectivo\": \"Efectivo\",\n      \"datafono_debito\": \"Tarjeta Débito\",\n      \"datafono_credito\": \"Tarjeta Crédito\", \n      \"qr_bancolombia\": \"QR Bancolombia\"\n    };\n    return descriptions[method] || method;\n  }\n}","size_bytes":8044}},"version":1}