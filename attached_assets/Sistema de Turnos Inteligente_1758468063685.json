{
  "name": "Sistema de Turnos Inteligente",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 15
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "ef2b7e83-f1cb-4964-9a24-bc1056da805c",
      "name": "Monitoreo Turnos"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  t.id,\n  t.empleado_id,\n  e.nombre,\n  e.apellido,\n  e.rol,\n  t.fecha,\n  t.hora_inicio,\n  t.hora_fin,\n  t.estado,\n  -- Verificar si está en horario\n  CASE \n    WHEN t.estado = 'activo' AND CURRENT_TIME > t.hora_inicio + INTERVAL '15 minutes' THEN 'TARDANZA'\n    WHEN t.estado = 'activo' AND CURRENT_TIME < t.hora_inicio THEN 'NO_HA_LLEGADO'\n    WHEN t.estado = 'activo' AND CURRENT_TIME BETWEEN t.hora_inicio AND t.hora_fin THEN 'EN_TURNO'\n    WHEN t.estado = 'activo' AND CURRENT_TIME > t.hora_fin THEN 'TURNO_VENCIDO'\n    ELSE 'OK'\n  END as estado_tiempo,\n  -- Calcular horas trabajadas\n  CASE \n    WHEN t.estado = 'activo' THEN \n      EXTRACT(EPOCH FROM (CURRENT_TIME - t.hora_inicio)) / 3600\n    ELSE 0\n  END as horas_trabajadas\nFROM turnos t\nJOIN empleados e ON t.empleado_id = e.id\nWHERE t.fecha = CURRENT_DATE \n  AND t.estado = 'activo'\nORDER BY t.hora_inicio;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        208,
        0
      ],
      "id": "234bf6f3-7eb5-4324-a960-80e7d8b9357c",
      "name": "Verificar Turnos",
      "credentials": {
        "postgres": {
          "id": "2FevWKFbE5vwm3ou",
          "name": "Mi Supabase"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const turnos = $input.all().map(i => i.json);\n\n// Analizar problemas\nconst problemas = turnos.filter(t => t.estado_tiempo !== 'EN_TURNO' && t.estado_tiempo !== 'OK');\nconst tardanzas = turnos.filter(t => t.estado_tiempo === 'TARDANZA');\nconst ausencias = turnos.filter(t => t.estado_tiempo === 'NO_HA_LLEGADO');\nconst turnosVencidos = turnos.filter(t => t.estado_tiempo === 'TURNO_VENCIDO');\n\n// Calcular métricas\nconst totalEmpleados = turnos.length;\nconst empleadosPresentes = turnos.filter(t => t.estado_tiempo === 'EN_TURNO').length;\nconst porcentajeAsistencia = totalEmpleados > 0 ? (empleadosPresentes / totalEmpleados * 100).toFixed(1) : 0;\n\n// Función para formatear horas de forma segura\nconst formatHours = (value) => {\n  const num = parseFloat(value) || 0;\n  return num.toFixed(1);\n};\n\n// Generar alertas\nconst alertas = [];\n\nif (tardanzas.length > 0) {\n  alertas.push(`⚠️ ${tardanzas.length} empleado(s) con tardanza`);\n}\n\nif (ausencias.length > 0) {\n  alertas.push(`�� ${ausencias.length} empleado(s) ausente(s)`);\n}\n\nif (turnosVencidos.length > 0) {\n  alertas.push(`⏰ ${turnosVencidos.length} turno(s) vencido(s)`);\n}\n\n// Construir reporte\nconst fecha = new Date().toLocaleDateString('es-ES', {\n  weekday: 'long',\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n});\n\nconst hora = new Date().toLocaleTimeString('es-ES', {\n  hour: '2-digit',\n  minute: '2-digit'\n});\n\nconst html = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <style>\n    body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background-color: #f8f9fa; }\n    .container { max-width: 1000px; margin: 0 auto; background: white; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); overflow: hidden; }\n    .header { background: linear-gradient(135deg, #17a2b8 0%, #138496 100%); color: white; padding: 30px; text-align: center; }\n    .header h1 { margin: 0; font-size: 28px; font-weight: 300; }\n    .header .time { margin-top: 10px; opacity: 0.9; font-size: 16px; }\n    .content { padding: 30px; }\n    .alertas { margin-bottom: 30px; }\n    .alerta { padding: 15px; border-radius: 8px; margin-bottom: 10px; font-weight: bold; }\n    .alerta-tardanza { background-color: #fff3cd; color: #856404; border-left: 4px solid #ffc107; }\n    .alerta-ausencia { background-color: #f8d7da; color: #721c24; border-left: 4px solid #dc3545; }\n    .alerta-vencido { background-color: #d1ecf1; color: #0c5460; border-left: 4px solid #17a2b8; }\n    .metricas { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }\n    .metrica { background: white; border-radius: 8px; padding: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); text-align: center; }\n    .metrica-valor { font-size: 32px; font-weight: bold; margin: 10px 0; }\n    .metrica-titulo { color: #6c757d; font-size: 14px; }\n    .table-container { overflow-x: auto; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\n    table { width: 100%; border-collapse: collapse; background: white; }\n    th { background: linear-gradient(135deg, #17a2b8 0%, #138496 100%); color: white; padding: 15px 12px; text-align: left; font-weight: 600; }\n    td { padding: 12px; border-bottom: 1px solid #dee2e6; }\n    .estado-tardanza { color: #ffc107; font-weight: bold; }\n    .estado-ausencia { color: #dc3545; font-weight: bold; }\n    .estado-vencido { color: #17a2b8; font-weight: bold; }\n    .estado-ok { color: #28a745; font-weight: bold; }\n    .footer { background: #f8f9fa; padding: 20px; text-align: center; color: #6c757d; border-top: 1px solid #dee2e6; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1>Monitoreo de Turnos</h1>\n      <div class=\"time\">${fecha} - ${hora}</div>\n    </div>\n    \n    <div class=\"content\">\n      ${alertas.length > 0 ? `\n      <div class=\"alertas\">\n        <h2 style=\"color: #495057; margin-bottom: 20px;\">Alertas Activas</h2>\n        ${alertas.map(alerta => `\n          <div class=\"alerta ${alerta.includes('tardanza') ? 'alerta-tardanza' : alerta.includes('ausente') ? 'alerta-ausencia' : 'alerta-vencido'}\">\n            ${alerta}\n          </div>\n        `).join('')}\n      </div>\n      ` : ''}\n\n      <div class=\"metricas\">\n        <div class=\"metrica\">\n          <div class=\"metrica-titulo\">Total Empleados</div>\n          <div class=\"metrica-valor\" style=\"color: #17a2b8;\">${totalEmpleados}</div>\n        </div>\n        <div class=\"metrica\">\n          <div class=\"metrica-titulo\">Presentes</div>\n          <div class=\"metrica-valor\" style=\"color: #28a745;\">${empleadosPresentes}</div>\n        </div>\n        <div class=\"metrica\">\n          <div class=\"metrica-titulo\">% Asistencia</div>\n          <div class=\"metrica-valor\" style=\"color: ${porcentajeAsistencia >= 90 ? '#28a745' : porcentajeAsistencia >= 70 ? '#ffc107' : '#dc3545'};\">${porcentajeAsistencia}%</div>\n        </div>\n        <div class=\"metrica\">\n          <div class=\"metrica-titulo\">Problemas</div>\n          <div class=\"metrica-valor\" style=\"color: #dc3545;\">${problemas.length}</div>\n        </div>\n      </div>\n\n      <div class=\"table-container\">\n        <table>\n          <thead>\n            <tr>\n              <th>Empleado</th>\n              <th>Rol</th>\n              <th>Turno</th>\n              <th>Estado</th>\n              <th>Horas Trabajadas</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${turnos.map(t => `\n              <tr>\n                <td>${t.nombre} ${t.apellido}</td>\n                <td style=\"text-transform: capitalize;\">${t.rol}</td>\n                <td>${t.hora_inicio} - ${t.hora_fin}</td>\n                <td class=\"estado-${t.estado_tiempo === 'TARDANZA' ? 'tardanza' : t.estado_tiempo === 'NO_HA_LLEGADO' ? 'ausencia' : t.estado_tiempo === 'TURNO_VENCIDO' ? 'vencido' : 'ok'}\">\n                  ${t.estado_tiempo === 'TARDANZA' ? 'TARDANZA' : \n                    t.estado_tiempo === 'NO_HA_LLEGADO' ? 'AUSENTE' : \n                    t.estado_tiempo === 'TURNO_VENCIDO' ? 'VENCIDO' : \n                    t.estado_tiempo === 'EN_TURNO' ? 'EN TURNO' : 'OK'}\n                </td>\n                <td>${formatHours(t.horas_trabajadas)}h</td>\n              </tr>\n            `).join('')}\n          </tbody>\n        </table>\n      </div>\n    </div>\n\n    <div class=\"footer\">\n      <p>Monitoreo automático del Sistema de Turnos Inteligente</p>\n      <p style=\"font-size: 12px; margin-top: 10px;\">© 2025 Sistema de Restaurante Futurista</p>\n    </div>\n  </div>\n</body>\n</html>\n`;\n\nconst text = `\nMONITOREO DE TURNOS - ${fecha} ${hora}\n\nMÉTRICAS:\n- Total Empleados: ${totalEmpleados}\n- Presentes: ${empleadosPresentes}\n- % Asistencia: ${porcentajeAsistencia}%\n- Problemas: ${problemas.length}\n\n${alertas.length > 0 ? `\nALERTAS:\n${alertas.join('\\n')}\n` : ''}\n\nDETALLE DE TURNOS:\n${turnos.map(t => \n  `- ${t.nombre} ${t.apellido} (${t.rol}): ${t.hora_inicio}-${t.hora_fin} | ${t.estado_tiempo} | ${formatHours(t.horas_trabajadas)}h trabajadas`\n).join('\\n')}\n\n---\nMonitoreo automático del Sistema de Turnos Inteligente\n© 2025 Sistema de Restaurante Futurista\n`;\n\nreturn [{\n  subject: problemas.length > 0 ? `⚠️ Alertas de Turnos - ${problemas.length} problema(s)` : `✅ Turnos OK - ${empleadosPresentes}/${totalEmpleados} presentes`,\n  text: text,\n  html: html,\n  to: $vars.MANAGEMENT_EMAIL || 'mary@blockflux.co'\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        0
      ],
      "id": "5ac0f9f7-df79-4aae-8de5-0f091eb57b0e",
      "name": "Análisis de Turnos"
    },
    {
      "parameters": {
        "fromEmail": "mary@blockflux.co",
        "toEmail": "={{ $json.to }}",
        "subject": "={{ $json.subject }}",
        "html": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        624,
        0
      ],
      "id": "04328ef1-a865-4b2a-825a-d66606602202",
      "name": "Enviar Reporte Turnos",
      "webhookId": "d8edf472-a909-442f-9428-43b2e0bed39a",
      "credentials": {
        "smtp": {
          "id": "DUnRyrIaP0JumMKM",
          "name": "SMTP account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Monitoreo Turnos": {
      "main": [
        [
          {
            "node": "Verificar Turnos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar Turnos": {
      "main": [
        [
          {
            "node": "Análisis de Turnos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Análisis de Turnos": {
      "main": [
        [
          {
            "node": "Enviar Reporte Turnos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5dc4b0c2-0a39-419a-9669-d5bf9e62f402",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "d74b527686138088569a73c83757ab612a53b10fd16aa355cf80b076bc8a543a"
  },
  "id": "xSbLSlo5RhdHEO6O",
  "tags": []
}